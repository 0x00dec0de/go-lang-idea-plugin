/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.goide.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.goide.GoTypes;
import java.util.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.goide.GoParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>go.flex</tt>
 */
public class _GoLexer implements FlexLexer, GoTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAYBE_SEMICOLON = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13792 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\100\1\36\1\56\1\102\1\1\1\60\1\53\1\103\1\100\1"+
    "\36\1\13\1\104\1\60\1\105\1\53\1\106\1\107\1\110\1\13\1\111\1\112\1\1\1\65"+
    "\1\1\1\25\2\13\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2"+
    "\1\1\71\1\1\1\114\1\1\1\123\1\13\1\124\1\1\1\125\7\1\2\13\1\30\1\105\1\114"+
    "\1\126\1\127\1\130\1\131\1\114\2\13\1\132\2\13\1\133\24\13\1\134\1\135\2\13"+
    "\1\134\2\13\1\136\1\137\1\14\3\13\1\137\3\13\1\30\2\1\1\13\1\1\5\13\1\140"+
    "\1\25\45\13\1\141\1\13\1\25\1\30\4\13\1\30\1\142\1\143\1\16\1\13\1\16\1\13"+
    "\1\16\1\143\1\71\3\13\1\144\1\1\1\145\1\114\2\1\1\114\5\13\1\27\2\13\1\146"+
    "\4\13\1\40\1\13\1\147\2\1\1\65\1\13\1\150\1\47\2\13\1\151\1\13\1\77\1\114"+
    "\2\1\1\13\1\112\3\13\1\47\2\1\2\114\1\152\5\1\1\107\2\13\1\144\1\153\1\114"+
    "\2\1\1\154\1\13\1\155\1\42\2\13\1\40\1\1\2\13\1\144\1\1\1\156\1\42\1\13\1"+
    "\150\6\1\1\157\1\160\14\13\4\1\21\13\1\140\2\13\1\140\1\161\1\13\1\150\3\13"+
    "\1\162\1\163\1\164\1\124\1\163\2\1\1\165\4\1\1\166\1\1\1\124\6\1\1\167\1\170"+
    "\1\171\1\172\1\173\3\1\1\174\147\1\2\13\1\147\2\13\1\147\10\13\1\175\1\176"+
    "\2\13\1\132\3\13\1\177\1\1\1\13\1\112\4\200\4\1\1\105\35\1\1\201\2\1\1\202"+
    "\1\25\4\13\1\203\1\25\4\13\1\133\1\107\1\13\1\150\1\25\4\13\1\147\1\1\1\13"+
    "\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\124\4\1\2\13\1"+
    "\150\20\13\1\124\1\13\1\204\1\1\2\13\1\147\1\105\1\13\1\150\4\13\1\40\2\1"+
    "\1\205\1\206\5\13\1\207\1\13\1\150\1\27\3\1\1\205\1\210\1\13\1\31\1\1\3\13"+
    "\1\144\1\206\2\13\1\144\1\1\1\114\1\1\1\211\1\42\1\13\1\40\1\13\1\112\1\1"+
    "\1\13\1\124\1\50\2\13\1\31\1\105\1\114\1\212\1\213\2\13\1\46\1\1\1\214\1\114"+
    "\1\13\1\215\3\13\1\216\1\217\1\220\1\30\1\66\1\221\1\222\1\200\2\13\1\133"+
    "\1\40\7\13\1\31\1\114\72\13\1\144\1\13\1\223\2\13\1\151\20\1\26\13\1\150\6"+
    "\13\1\77\2\1\1\112\1\224\1\56\1\225\1\226\6\13\1\16\1\1\1\154\25\13\1\150"+
    "\1\1\4\13\1\206\2\13\1\27\2\1\1\151\7\1\1\212\7\13\1\124\1\1\1\114\1\25\1"+
    "\30\1\25\1\30\1\227\4\13\1\147\1\230\1\231\2\1\1\232\1\13\1\14\1\233\2\150"+
    "\2\1\7\13\1\30\30\1\1\13\1\124\3\13\1\71\2\1\2\13\1\1\1\13\1\234\2\13\1\40"+
    "\1\13\1\150\2\13\1\235\3\1\11\13\1\150\1\114\5\1\2\13\1\27\3\13\1\144\11\1"+
    "\23\13\1\112\1\13\1\40\1\27\11\1\1\236\2\13\1\237\1\13\1\40\1\13\1\112\1\13"+
    "\1\147\4\1\1\13\1\240\1\13\1\40\1\13\1\77\4\1\3\13\1\241\4\1\1\71\1\242\1"+
    "\13\1\144\2\1\1\13\1\124\1\13\1\124\2\1\1\123\1\13\1\47\1\1\3\13\1\40\1\13"+
    "\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\154"+
    "\2\13\1\27\2\1\1\65\1\1\1\154\2\13\2\1\1\13\1\46\1\114\1\154\1\13\1\112\1"+
    "\65\1\1\2\13\1\243\1\154\2\13\1\31\1\244\1\245\2\1\1\13\1\22\1\151\5\1\1\246"+
    "\1\247\1\46\2\13\1\147\1\1\1\114\1\73\1\55\1\56\1\70\1\1\1\250\1\16\21\1\3"+
    "\13\1\1\1\251\1\114\12\1\2\13\1\147\2\1\1\252\2\1\3\13\1\1\1\253\1\114\2\1"+
    "\2\13\1\30\1\1\1\114\3\1\1\13\1\77\1\1\1\114\26\1\4\13\1\114\1\105\34\1\3"+
    "\13\1\46\20\1\71\13\1\77\16\1\14\13\1\144\53\1\2\13\1\147\75\1\44\13\1\112"+
    "\33\1\43\13\1\46\1\13\1\147\1\114\6\1\1\13\1\150\1\1\3\13\1\1\1\144\1\114"+
    "\1\154\1\254\1\13\67\1\4\13\1\47\1\71\3\1\1\154\6\1\1\16\77\1\6\13\1\30\1"+
    "\124\1\46\1\77\66\1\5\13\1\212\3\13\1\143\1\255\1\256\1\257\3\13\1\260\1\261"+
    "\1\13\1\262\1\263\1\36\24\13\1\264\1\13\1\36\1\133\1\13\1\133\1\13\1\212\1"+
    "\13\1\212\1\147\1\13\1\147\1\13\1\56\1\13\1\56\1\13\1\265\3\266\14\13\1\47"+
    "\123\1\1\257\1\13\1\267\1\270\1\271\1\272\1\273\1\274\1\275\1\151\1\276\1"+
    "\151\24\1\55\13\1\112\2\1\103\13\1\47\15\13\1\150\150\13\1\16\25\1\41\13\1"+
    "\150\36\1");

  /* The ZZ_CMAP_A table has 3056 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\1\77\1\3\1\2\22\0\1\3\1\45\1\21\2\0\1\52\1\47\1\27\1\37\1\40"+
    "\1\5\1\46\1\43\1\17\1\20\1\4\1\13\7\12\1\24\1\11\1\41\1\42\1\51\1\44\1\53"+
    "\2\0\4\10\1\16\1\10\16\6\1\23\2\6\1\15\2\6\1\35\1\22\1\36\1\50\1\6\1\31\1"+
    "\57\1\54\1\67\1\71\1\56\1\26\1\65\1\63\1\70\1\6\1\60\1\61\1\74\1\66\1\64\1"+
    "\72\1\6\1\55\1\73\1\62\1\30\1\25\1\75\1\14\1\76\1\6\1\33\1\32\1\34\7\0\1\77"+
    "\24\0\1\6\12\0\1\6\4\0\1\6\5\0\27\6\1\0\12\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0"+
    "\1\6\1\0\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\23"+
    "\6\1\0\13\6\10\0\6\6\1\0\26\6\2\0\1\6\6\0\10\6\10\0\13\6\5\0\3\6\15\0\12\7"+
    "\4\0\6\6\1\0\1\6\17\0\2\6\7\0\2\6\12\7\3\6\2\0\2\6\1\0\16\6\15\0\11\6\13\0"+
    "\1\6\16\0\12\7\6\6\4\0\2\6\4\0\1\6\5\0\6\6\4\0\1\6\11\0\1\6\3\0\1\6\7\0\11"+
    "\6\7\0\5\6\17\0\26\6\3\0\1\6\2\0\1\6\7\0\12\6\4\0\12\7\1\6\4\0\10\6\2\0\2"+
    "\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\3\0\1\6\20\0\1\6\15\0\2\6\1\0\1\6\5\0"+
    "\6\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\17\0\4\6\1\0\1\6\7\0\12\7\2\0\3\6\20"+
    "\0\11\6\1\0\2\6\1\0\2\6\1\0\5\6\3\0\1\6\2\0\1\6\30\0\1\6\13\0\10\6\2\0\1\6"+
    "\3\0\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3"+
    "\0\14\6\13\0\10\6\1\0\2\6\10\0\3\6\5\0\4\6\1\0\5\6\3\0\1\6\3\0\2\6\15\0\13"+
    "\6\2\0\1\6\21\0\1\6\12\0\6\6\5\0\22\6\3\0\10\6\1\0\11\6\1\0\1\6\2\0\7\6\11"+
    "\0\1\6\1\0\2\6\14\0\12\7\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1"+
    "\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\0\2\6\11\0\1\6\2\0\5\6\1"+
    "\0\1\6\11\0\12\7\2\0\14\6\1\0\24\6\13\0\5\6\3\0\6\6\4\0\4\6\3\0\1\6\3\0\2"+
    "\6\7\0\3\6\4\0\15\6\14\0\1\6\1\0\6\6\1\0\1\6\5\0\1\6\2\0\13\6\1\0\15\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\16"+
    "\6\2\0\6\6\2\0\15\6\2\0\1\6\1\0\10\6\7\0\15\6\1\0\6\6\23\0\1\6\4\0\1\6\3\0"+
    "\11\6\1\0\1\6\5\0\17\6\1\0\16\6\2\0\14\6\13\0\1\6\15\0\7\6\7\0\16\6\15\0\2"+
    "\6\12\7\3\0\3\6\11\0\4\6\1\0\4\6\3\0\2\6\11\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\6\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\14\0\2\77\7\0\1\6"+
    "\15\0\1\6\2\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\4\0\2\6\13\0\5\6\6\0\4\6\3\0\2\6"+
    "\14\0\10\6\7\0\10\6\1\0\7\6\6\0\2\6\12\0\5\6\5\0\2\6\3\0\7\6\6\0\3\6\12\7"+
    "\2\6\13\0\11\6\2\0\27\6\2\0\7\6\1\0\3\6\1\0\4\6\1\0\4\6\2\0\6\6\3\0\1\6\1"+
    "\0\1\6\2\0\5\6\1\0\12\6\12\7\5\6\1\0\3\6\1\0\10\6\4\0\7\6\3\0\1\6\3\0\2\6"+
    "\1\0\1\6\3\0\2\6\2\0\5\6\2\0\1\6\1\0\1\6\30\0\3\6\3\0\6\6\2\0\6\6\2\0\6\6"+
    "\11\0\7\6\4\0\5\6\3\0\5\6\5\0\1\6\1\0\10\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\12\6\6\0\12\6\2\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\14\6\1\0\16\6\1\0\2"+
    "\6\1\0\2\6\1\0\10\6\6\0\4\6\4\0\16\6\2\0\1\6\1\0\14\6\1\0\2\6\3\0\1\6\2\0"+
    "\4\6\1\0\2\6\12\0\10\6\6\0\6\6\1\0\3\6\1\0\12\6\3\0\1\6\12\0\4\6\13\0\12\7"+
    "\1\6\1\0\1\6\3\0\7\6\1\0\1\6\1\0\4\6\1\0\17\6\1\0\2\6\14\0\3\6\4\0\2\6\1\0"+
    "\1\6\20\0\4\6\10\0\1\6\13\0\10\6\5\0\3\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6"+
    "\1\0\1\6\1\0\7\6\1\0\21\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\14\6\1\0\4\6\1\0\5"+
    "\6\1\0\1\6\3\0\14\6\2\0\13\6\1\0\10\6\2\0\22\7\1\0\2\6\1\0\1\6\2\0\1\6\1\0"+
    "\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0"+
    "\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4"+
    "\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\5\6\1\0\3\6\1\0\5\6\1\0\5"+
    "\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\2\7\1\10\1\11\1\12\2\6\1\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\13\6\1\36\2\37\1\36\1\40\1\41\1\42"+
    "\1\43\2\0\1\44\1\45\1\46\1\0\1\47\1\50"+
    "\1\0\1\12\1\0\4\6\1\51\1\0\1\13\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\5\6\1\73\3\6\1\74\10\6\1\41\1\44\1\0"+
    "\1\75\1\76\1\77\1\100\2\6\1\101\1\51\3\0"+
    "\1\102\1\0\1\103\1\104\1\105\20\6\1\106\1\41"+
    "\1\0\1\107\1\6\4\0\3\6\1\110\1\111\1\112"+
    "\1\113\1\114\13\6\1\0\1\115\1\6\1\116\1\6"+
    "\1\117\2\6\1\120\6\6\1\0\1\121\2\6\1\122"+
    "\2\6\1\123\1\124\1\125\3\6\1\126\1\127\1\6"+
    "\1\130\2\6\1\131\1\6\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\200\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\u03c0\0\u0400\0\u0440\0\200\0\200\0\200\0\200\0\200"+
    "\0\200\0\u0480\0\200\0\200\0\u04c0\0\u0500\0\u0540\0\u0580"+
    "\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780"+
    "\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\200"+
    "\0\200\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\200\0\200\0\u01c0"+
    "\0\u0a80\0\u0ac0\0\200\0\u0b00\0\u0b40\0\200\0\200\0\u0b80"+
    "\0\200\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40"+
    "\0\200\0\200\0\200\0\200\0\200\0\200\0\200\0\200"+
    "\0\200\0\200\0\u0d80\0\200\0\200\0\200\0\u0dc0\0\200"+
    "\0\200\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\u1000\0\u1040\0\u0180\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\200"+
    "\0\u0b40\0\200\0\u0180\0\u1340\0\u1380\0\u0180\0\200\0\u13c0"+
    "\0\u1400\0\u1440\0\u0d00\0\u1480\0\200\0\200\0\200\0\u14c0"+
    "\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0"+
    "\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u0180"+
    "\0\200\0\u1280\0\u0180\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0"+
    "\0\u1a00\0\u1a40\0\u1a80\0\u0180\0\u0180\0\u0180\0\u0180\0\u0180"+
    "\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80"+
    "\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u0180\0\u1dc0\0\u0180\0\u1e00"+
    "\0\u0180\0\u1e40\0\u1e80\0\u0180\0\u1ec0\0\u1f00\0\u1f40\0\u1f80"+
    "\0\u1fc0\0\u2000\0\u2040\0\u0180\0\u2080\0\u20c0\0\u0180\0\u2100"+
    "\0\u2140\0\u0180\0\u0180\0\u0180\0\u2180\0\u21c0\0\u2200\0\u0180"+
    "\0\u0180\0\u2240\0\u0180\0\u2280\0\u22c0\0\u0180\0\u2300\0\u0180";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\10"+
    "\2\12\1\13\3\10\1\14\1\15\1\16\1\3\1\10"+
    "\1\12\1\17\1\20\1\21\1\10\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\3\10\1\50\2\10\1\51\1\10"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\2\10\1\0"+
    "\1\60\1\61\1\62\1\5\1\63\72\60\102\0\2\4"+
    "\101\0\1\64\1\65\36\0\1\66\77\0\1\67\41\0"+
    "\11\10\4\0\4\10\1\0\1\10\23\0\23\10\10\0"+
    "\1\70\1\0\3\70\2\0\1\71\1\0\1\72\3\0"+
    "\1\70\31\0\1\71\11\0\1\73\16\0\1\70\1\0"+
    "\3\12\2\0\1\71\1\0\1\72\3\0\1\12\31\0"+
    "\1\71\11\0\1\73\16\0\1\70\1\0\1\70\2\74"+
    "\2\75\1\71\1\0\1\72\3\0\1\70\31\0\1\71"+
    "\11\0\1\73\26\0\1\76\24\0\1\77\42\0\1\72"+
    "\1\0\3\72\4\0\1\100\3\0\1\72\53\0\1\16"+
    "\2\0\16\16\1\101\1\102\55\16\6\0\11\10\4\0"+
    "\4\10\1\0\1\10\23\0\3\10\1\103\17\10\7\0"+
    "\11\10\4\0\4\10\1\0\1\104\23\0\3\10\1\105"+
    "\4\10\1\106\12\10\1\0\22\107\1\110\55\107\31\22"+
    "\1\111\46\22\32\0\1\112\11\0\1\113\77\0\1\114"+
    "\77\0\1\115\77\0\1\116\77\0\1\117\1\0\1\120"+
    "\75\0\1\121\2\0\1\122\1\123\73\0\1\124\52\0"+
    "\1\125\24\0\1\126\4\0\1\127\72\0\1\130\77\0"+
    "\1\131\6\0\1\132\32\0\11\10\4\0\4\10\1\0"+
    "\1\10\23\0\1\10\1\133\21\10\7\0\11\10\4\0"+
    "\4\10\1\0\1\10\23\0\2\10\1\134\1\135\17\10"+
    "\7\0\11\10\4\0\4\10\1\0\1\10\23\0\5\10"+
    "\1\136\15\10\7\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\22\10\1\137\7\0\11\10\4\0\4\10\1\0"+
    "\1\10\23\0\10\10\1\140\12\10\7\0\11\10\4\0"+
    "\4\10\1\0\1\10\23\0\3\10\1\141\3\10\1\142"+
    "\1\143\12\10\7\0\11\10\4\0\3\10\1\144\1\0"+
    "\1\10\23\0\12\10\1\145\5\10\1\146\2\10\7\0"+
    "\11\10\4\0\4\10\1\0\1\10\23\0\2\10\1\147"+
    "\20\10\7\0\11\10\4\0\4\10\1\0\1\10\23\0"+
    "\3\10\1\150\17\10\7\0\11\10\4\0\4\10\1\0"+
    "\1\10\23\0\2\10\1\151\3\10\1\152\12\10\1\153"+
    "\1\10\7\0\11\10\4\0\4\10\1\0\1\10\23\0"+
    "\3\10\1\154\17\10\2\0\1\61\102\0\1\64\1\65"+
    "\72\0\1\64\2\0\75\64\5\65\1\155\72\65\7\0"+
    "\1\156\1\0\3\156\3\0\1\157\4\0\1\156\21\0"+
    "\1\157\40\0\1\72\1\0\3\72\2\0\1\71\5\0"+
    "\1\72\31\0\1\71\11\0\1\160\16\0\1\70\1\0"+
    "\1\70\2\74\2\0\1\71\1\0\1\72\3\0\1\70"+
    "\31\0\1\71\11\0\1\73\17\0\4\161\2\0\1\161"+
    "\5\0\1\161\1\0\1\161\25\0\1\161\1\0\2\161"+
    "\7\0\1\161\1\0\1\161\26\0\1\162\71\0\3\16"+
    "\4\0\6\16\1\0\1\16\23\0\2\16\1\0\1\16"+
    "\2\0\1\16\3\0\1\16\17\0\11\10\4\0\4\10"+
    "\1\0\1\10\23\0\1\10\1\163\21\10\7\0\11\10"+
    "\4\0\4\10\1\0\1\10\23\0\12\10\1\164\10\10"+
    "\7\0\11\10\4\0\4\10\1\0\1\10\23\0\5\10"+
    "\1\165\15\10\7\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\1\10\1\166\21\10\30\0\1\167\62\0\2\170"+
    "\1\171\5\0\1\107\1\172\1\0\2\107\1\173\1\174"+
    "\23\0\2\107\1\0\1\107\2\0\1\107\3\0\1\107"+
    "\55\0\1\175\77\0\1\176\77\0\1\177\41\0\11\10"+
    "\4\0\4\10\1\0\1\10\23\0\2\10\1\200\20\10"+
    "\7\0\11\10\4\0\4\10\1\0\1\10\23\0\6\10"+
    "\1\201\14\10\7\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\12\10\1\202\10\10\7\0\11\10\4\0\4\10"+
    "\1\0\1\10\23\0\17\10\1\203\3\10\7\0\11\10"+
    "\4\0\4\10\1\0\1\10\23\0\16\10\1\204\4\10"+
    "\7\0\11\10\4\0\4\10\1\0\1\10\23\0\6\10"+
    "\1\205\14\10\7\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\17\10\1\206\3\10\7\0\11\10\4\0\4\10"+
    "\1\0\1\10\23\0\3\10\1\207\17\10\7\0\11\10"+
    "\4\0\4\10\1\0\1\10\23\0\12\10\1\210\10\10"+
    "\7\0\11\10\4\0\4\10\1\0\1\10\23\0\6\10"+
    "\1\211\14\10\7\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\16\10\1\212\4\10\7\0\11\10\4\0\3\10"+
    "\1\213\1\0\1\10\23\0\23\10\7\0\11\10\4\0"+
    "\4\10\1\0\1\10\23\0\13\10\1\214\7\10\7\0"+
    "\11\10\4\0\4\10\1\0\1\10\23\0\5\10\1\215"+
    "\15\10\7\0\11\10\4\0\4\10\1\0\1\10\23\0"+
    "\1\10\1\216\21\10\7\0\11\10\4\0\4\10\1\0"+
    "\1\10\23\0\14\10\1\217\6\10\7\0\11\10\4\0"+
    "\4\10\1\0\1\10\23\0\16\10\1\220\4\10\1\0"+
    "\4\65\1\221\1\222\72\65\7\0\1\156\1\0\3\156"+
    "\10\0\1\156\43\0\1\160\16\0\1\156\1\0\3\156"+
    "\10\0\1\156\61\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\13\10\1\223\7\10\7\0\11\10\4\0\4\10"+
    "\1\0\1\10\23\0\5\10\1\224\15\10\13\0\2\225"+
    "\74\0\4\226\2\0\1\226\5\0\1\226\1\0\1\226"+
    "\25\0\1\226\1\0\2\226\7\0\1\226\1\0\1\226"+
    "\16\0\4\227\2\0\1\227\5\0\1\227\1\0\1\227"+
    "\25\0\1\227\1\0\2\227\7\0\1\227\1\0\1\227"+
    "\16\0\4\230\2\0\1\230\5\0\1\230\1\0\1\230"+
    "\25\0\1\230\1\0\2\230\7\0\1\230\1\0\1\230"+
    "\14\0\11\10\4\0\4\10\1\0\1\10\23\0\3\10"+
    "\1\231\17\10\7\0\11\10\4\0\4\10\1\0\1\232"+
    "\23\0\23\10\7\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\11\10\1\233\11\10\7\0\11\10\4\0\4\10"+
    "\1\0\1\10\23\0\2\10\1\234\20\10\7\0\11\10"+
    "\4\0\4\10\1\0\1\10\23\0\2\10\1\235\20\10"+
    "\7\0\11\10\4\0\4\10\1\0\1\10\23\0\10\10"+
    "\1\236\12\10\7\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\2\10\1\237\20\10\7\0\11\10\4\0\4\10"+
    "\1\0\1\10\23\0\12\10\1\240\10\10\7\0\11\10"+
    "\4\0\4\10\1\0\1\10\23\0\6\10\1\241\10\10"+
    "\1\242\3\10\7\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\2\10\1\243\20\10\7\0\11\10\4\0\4\10"+
    "\1\0\1\10\23\0\10\10\1\244\12\10\7\0\11\10"+
    "\4\0\4\10\1\0\1\10\23\0\2\10\1\245\1\246"+
    "\17\10\7\0\11\10\4\0\4\10\1\0\1\10\23\0"+
    "\4\10\1\247\16\10\7\0\11\10\4\0\4\10\1\0"+
    "\1\10\23\0\2\10\1\250\20\10\7\0\11\10\4\0"+
    "\4\10\1\0\1\251\23\0\23\10\7\0\11\10\4\0"+
    "\4\10\1\0\1\10\23\0\6\10\1\252\14\10\7\0"+
    "\11\10\4\0\4\10\1\0\1\10\23\0\6\10\1\253"+
    "\14\10\13\0\2\107\74\0\4\107\2\0\1\107\5\0"+
    "\1\107\1\0\1\107\25\0\1\107\1\0\2\107\7\0"+
    "\1\107\1\0\1\107\16\0\4\254\2\0\1\254\5\0"+
    "\1\254\1\0\1\254\25\0\1\254\1\0\2\254\7\0"+
    "\1\254\1\0\1\254\16\0\4\171\2\0\1\171\5\0"+
    "\1\171\1\0\1\171\25\0\1\171\1\0\2\171\7\0"+
    "\1\171\1\0\1\171\14\0\11\10\4\0\4\10\1\0"+
    "\1\10\23\0\4\10\1\255\16\10\7\0\11\10\4\0"+
    "\4\10\1\0\1\10\23\0\1\10\1\256\21\10\7\0"+
    "\11\10\4\0\4\10\1\0\1\10\23\0\2\10\1\257"+
    "\20\10\7\0\11\10\4\0\4\10\1\0\1\10\23\0"+
    "\14\10\1\260\6\10\7\0\11\10\4\0\4\10\1\0"+
    "\1\10\23\0\6\10\1\261\14\10\7\0\11\10\4\0"+
    "\4\10\1\0\1\10\23\0\1\10\1\262\21\10\7\0"+
    "\11\10\4\0\4\10\1\0\1\10\23\0\1\10\1\263"+
    "\21\10\7\0\11\10\4\0\4\10\1\0\1\10\23\0"+
    "\1\10\1\264\21\10\7\0\11\10\4\0\4\10\1\0"+
    "\1\265\23\0\23\10\7\0\11\10\4\0\4\10\1\0"+
    "\1\10\23\0\3\10\1\266\17\10\7\0\11\10\4\0"+
    "\4\10\1\0\1\10\23\0\13\10\1\267\7\10\7\0"+
    "\11\10\4\0\4\10\1\0\1\10\23\0\13\10\1\270"+
    "\7\10\7\0\11\10\4\0\4\10\1\0\1\10\23\0"+
    "\13\10\1\271\7\10\7\0\11\10\4\0\4\10\1\0"+
    "\1\10\23\0\7\10\1\272\13\10\11\0\4\273\2\0"+
    "\1\273\5\0\1\273\1\0\1\273\25\0\1\273\1\0"+
    "\2\273\7\0\1\273\1\0\1\273\14\0\11\10\4\0"+
    "\4\10\1\0\1\10\23\0\12\10\1\274\10\10\7\0"+
    "\11\10\4\0\4\10\1\0\1\10\23\0\12\10\1\275"+
    "\10\10\7\0\11\10\4\0\3\10\1\276\1\0\1\10"+
    "\23\0\23\10\7\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\6\10\1\277\14\10\7\0\11\10\4\0\4\10"+
    "\1\0\1\10\23\0\5\10\1\300\15\10\7\0\11\10"+
    "\4\0\4\10\1\0\1\10\23\0\11\10\1\301\11\10"+
    "\7\0\11\10\4\0\4\10\1\0\1\10\23\0\6\10"+
    "\1\302\14\10\7\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\6\10\1\303\14\10\7\0\11\10\4\0\4\10"+
    "\1\0\1\10\23\0\7\10\1\304\13\10\7\0\11\10"+
    "\4\0\4\10\1\0\1\10\23\0\1\10\1\305\21\10"+
    "\11\0\4\174\2\0\1\174\5\0\1\174\1\0\1\174"+
    "\25\0\1\174\1\0\2\174\7\0\1\174\1\0\1\174"+
    "\14\0\11\10\4\0\4\10\1\0\1\306\23\0\23\10"+
    "\7\0\11\10\4\0\4\10\1\0\1\10\23\0\3\10"+
    "\1\307\17\10\7\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\6\10\1\310\14\10\7\0\11\10\4\0\4\10"+
    "\1\0\1\10\23\0\2\10\1\311\20\10\7\0\11\10"+
    "\4\0\4\10\1\0\1\10\23\0\10\10\1\312\12\10"+
    "\7\0\11\10\4\0\4\10\1\0\1\10\23\0\2\10"+
    "\1\313\20\10\7\0\11\10\4\0\4\10\1\0\1\10"+
    "\23\0\13\10\1\314\7\10\7\0\11\10\4\0\4\10"+
    "\1\0\1\315\23\0\23\10\7\0\11\10\4\0\4\10"+
    "\1\0\1\10\23\0\2\10\1\316\20\10\7\0\11\10"+
    "\4\0\4\10\1\0\1\10\23\0\11\10\1\317\11\10"+
    "\7\0\11\10\4\0\4\10\1\0\1\10\23\0\7\10"+
    "\1\320\13\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9024];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\16\1\6\11\1\1\2\11"+
    "\23\1\2\11\4\1\2\11\2\0\1\1\1\11\1\1"+
    "\1\0\2\11\1\0\1\11\1\0\5\1\1\0\12\11"+
    "\1\1\3\11\1\1\2\11\25\1\1\0\1\11\1\1"+
    "\1\11\4\1\1\11\3\0\1\1\1\0\3\11\21\1"+
    "\1\11\1\0\2\1\4\0\23\1\1\0\16\1\1\0"+
    "\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _GoLexer() {
    this((java.io.Reader)null);
 }

  private Stack<IElementType> gStringStack = new Stack<IElementType>();
  private Stack<IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;
  private int afterNls = YYINITIAL;
  private int afterBrace = YYINITIAL;

  private void clearStacks(){
    gStringStack.clear();
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack<IElementType>();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 91: break;
          case 2: 
            { return NLS;
            }
          case 92: break;
          case 3: 
            { return WS;
            }
          case 93: break;
          case 4: 
            { return QUOTIENT;
            }
          case 94: break;
          case 5: 
            { return MUL;
            }
          case 95: break;
          case 6: 
            { yybegin(MAYBE_SEMICOLON); return IDENTIFIER;
            }
          case 96: break;
          case 7: 
            { yybegin(MAYBE_SEMICOLON); return INT;
            }
          case 97: break;
          case 8: 
            { return MINUS;
            }
          case 98: break;
          case 9: 
            { return DOT;
            }
          case 99: break;
          case 10: 
            { yybegin(MAYBE_SEMICOLON); return STRING;
            }
          case 100: break;
          case 11: 
            { yybegin(MAYBE_SEMICOLON); return RAW_STRING;
            }
          case 101: break;
          case 12: 
            { return BIT_OR;
            }
          case 102: break;
          case 13: 
            { return LBRACE;
            }
          case 103: break;
          case 14: 
            { yybegin(MAYBE_SEMICOLON); return RBRACE;
            }
          case 104: break;
          case 15: 
            { return LBRACK;
            }
          case 105: break;
          case 16: 
            { yybegin(MAYBE_SEMICOLON); return RBRACK;
            }
          case 106: break;
          case 17: 
            { return LPAREN;
            }
          case 107: break;
          case 18: 
            { yybegin(MAYBE_SEMICOLON); return RPAREN;
            }
          case 108: break;
          case 19: 
            { return COLON;
            }
          case 109: break;
          case 20: 
            { return SEMICOLON;
            }
          case 110: break;
          case 21: 
            { return COMMA;
            }
          case 111: break;
          case 22: 
            { return ASSIGN;
            }
          case 112: break;
          case 23: 
            { return NOT;
            }
          case 113: break;
          case 24: 
            { return PLUS;
            }
          case 114: break;
          case 25: 
            { return BIT_AND;
            }
          case 115: break;
          case 26: 
            { return BIT_XOR;
            }
          case 116: break;
          case 27: 
            { return LESS;
            }
          case 117: break;
          case 28: 
            { return REMAINDER;
            }
          case 118: break;
          case 29: 
            { return GREATER;
            }
          case 119: break;
          case 30: 
            { yybegin(YYINITIAL); yypushback(yytext().length());
            }
          case 120: break;
          case 31: 
            { yybegin(YYINITIAL); yypushback(yytext().length()); return SEMICOLON_SYNTHETIC;
            }
          case 121: break;
          case 32: 
            { return LINE_COMMENT;
            }
          case 122: break;
          case 33: 
            { return MULTILINE_COMMENT;
            }
          case 123: break;
          case 34: 
            { return QUOTIENT_ASSIGN;
            }
          case 124: break;
          case 35: 
            { return MUL_ASSIGN;
            }
          case 125: break;
          case 36: 
            { yybegin(MAYBE_SEMICOLON); return FLOAT;
            }
          case 126: break;
          case 37: 
            { yybegin(MAYBE_SEMICOLON); return DECIMALI;
            }
          case 127: break;
          case 38: 
            { yybegin(MAYBE_SEMICOLON); return OCT;
            }
          case 128: break;
          case 39: 
            { yybegin(MAYBE_SEMICOLON); return MINUS_MINUS;
            }
          case 129: break;
          case 40: 
            { return MINUS_ASSIGN;
            }
          case 130: break;
          case 41: 
            { yybegin(MAYBE_SEMICOLON); return CHAR;
            }
          case 131: break;
          case 42: 
            { return COND_OR;
            }
          case 132: break;
          case 43: 
            { return BIT_OR_ASSIGN;
            }
          case 133: break;
          case 44: 
            { return VAR_ASSIGN;
            }
          case 134: break;
          case 45: 
            { return EQ;
            }
          case 135: break;
          case 46: 
            { return NOT_EQ;
            }
          case 136: break;
          case 47: 
            { return PLUS_ASSIGN;
            }
          case 137: break;
          case 48: 
            { yybegin(MAYBE_SEMICOLON); return PLUS_PLUS;
            }
          case 138: break;
          case 49: 
            { return BIT_AND_ASSIGN;
            }
          case 139: break;
          case 50: 
            { return COND_AND;
            }
          case 140: break;
          case 51: 
            { return BIT_CLEAR;
            }
          case 141: break;
          case 52: 
            { return BIT_XOR_ASSIGN;
            }
          case 142: break;
          case 53: 
            { return SEND_CHANNEL;
            }
          case 143: break;
          case 54: 
            { return LESS_OR_EQUAL;
            }
          case 144: break;
          case 55: 
            { return SHIFT_LEFT;
            }
          case 145: break;
          case 56: 
            { return REMAINDER_ASSIGN;
            }
          case 146: break;
          case 57: 
            { return GREATER_OR_EQUAL;
            }
          case 147: break;
          case 58: 
            { return SHIFT_RIGHT;
            }
          case 148: break;
          case 59: 
            { return GO;
            }
          case 149: break;
          case 60: 
            { return IF ;
            }
          case 150: break;
          case 61: 
            { yybegin(MAYBE_SEMICOLON); return FLOATI;
            }
          case 151: break;
          case 62: 
            { yybegin(MAYBE_SEMICOLON); return HEX;
            }
          case 152: break;
          case 63: 
            { return TRIPLE_DOT;
            }
          case 153: break;
          case 64: 
            { return VAR;
            }
          case 154: break;
          case 65: 
            { return FOR ;
            }
          case 155: break;
          case 66: 
            { yybegin(MAYBE_SEMICOLON); return BAD_CHARACTER;
            }
          case 156: break;
          case 67: 
            { return BIT_CLEAR_ASSIGN;
            }
          case 157: break;
          case 68: 
            { return SHIFT_LEFT_ASSIGN;
            }
          case 158: break;
          case 69: 
            { return SHIFT_RIGHT_ASSIGN;
            }
          case 159: break;
          case 70: 
            { return MAP;
            }
          case 160: break;
          case 71: 
            { return FUNC;
            }
          case 161: break;
          case 72: 
            { return ELSE;
            }
          case 162: break;
          case 73: 
            { return TYPE_;
            }
          case 163: break;
          case 74: 
            { return GOTO;
            }
          case 164: break;
          case 75: 
            { return CASE;
            }
          case 165: break;
          case 76: 
            { return CHAN;
            }
          case 166: break;
          case 77: 
            { yybegin(MAYBE_SEMICOLON); return BREAK;
            }
          case 167: break;
          case 78: 
            { return RANGE;
            }
          case 168: break;
          case 79: 
            { return CONST;
            }
          case 169: break;
          case 80: 
            { return DEFER;
            }
          case 170: break;
          case 81: 
            { yybegin(MAYBE_SEMICOLON); return RETURN ;
            }
          case 171: break;
          case 82: 
            { return IMPORT ;
            }
          case 172: break;
          case 83: 
            { return SELECT;
            }
          case 173: break;
          case 84: 
            { return STRUCT;
            }
          case 174: break;
          case 85: 
            { return SWITCH;
            }
          case 175: break;
          case 86: 
            { return DEFAULT;
            }
          case 176: break;
          case 87: 
            { return PACKAGE;
            }
          case 177: break;
          case 88: 
            { yybegin(MAYBE_SEMICOLON); return CONTINUE ;
            }
          case 178: break;
          case 89: 
            { return INTERFACE;
            }
          case 179: break;
          case 90: 
            { yybegin(MAYBE_SEMICOLON); return FALLTHROUGH;
            }
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
