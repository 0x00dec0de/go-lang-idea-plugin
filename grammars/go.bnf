{
  parserClass='com.goide.parser.GoParser'

  implements='com.goide.psi.GoCompositeElement'
  extends='com.goide.psi.impl.GoCompositeElementImpl'
  
  elementTypeHolderClass='com.goide.GoTypes'
  elementTypeClass='com.goide.psi.GoCompositeElementType'
  tokenTypeClass='com.goide.psi.GoTokenType'
  
  psiClassPrefix='Go'
  psiImplClassSuffix='Impl'
  psiPackage='com.goide.psi'
  psiImplPackage='com.goide.psi.impl'
  psiImplUtilClass="com.goide.psi.impl.GoPsiImplUtil"
  parserUtilClass="com.goide.parser.GoParserUtil"

  LBRACE               =  '{'
  RBRACE               =  '}'
  LBRACK               =  '['
  RBRACK               =  ']'
  LPAREN               =  '('
  RPAREN               =  ')'
  COLON                =  ':'
  SEMICOLON            =  ';'
  COMMA                =  ','
  EQ                   =  '=='
  ASSIGN               =  '='
  NOT_EQ               =  '!='
  NOT                  =  '!'
  PLUS_PLUS            =  '++'
  PLUS_ASSIGN          =  '+='
  PLUS                 =  '+'
  MINUS_MINUS          =  '--'
  MINUS_ASSIGN         =  '-='
  MINUS                =  '-'
  COND_OR              =  '||'
  BIT_OR_ASSIGN        =  '|='
  BIT_CLEAR_ASSIGN     =  '&^='
  BIT_CLEAR            =  '&^'
  COND_AND             =  '&&'
  BIT_AND_ASSIGN       =  '&='
  BIT_AND              =  '&'
  BIT_OR               =  '|'
  SHIFT_LEFT_ASSIGN    =  '<<='
  SHIFT_LEFT           =  '<<'
  SEND_CHANNEL         =  '<-'
  LESS_OR_EQUAL        =  '<='
  LESS                 =  '<'
  BIT_XOR_ASSIGN       =  '^='
  BIT_XOR              =  '^'
  MUL_ASSIGN           =  '*='
  MUL                  =  '*'
  QUOTIENT_ASSIGN      =  '/='
  QUOTIENT             =  '/'
  REMAINDER_ASSIGN     =  '%='
  REMAINDER            =  '%'
  SHIFT_RIGHT_ASSIGN   =  '>>='
  SHIFT_RIGHT          =  '>>'
  GREATER_OR_EQUAL     =  '>='
  GREATER              =  '>'
  VAR_ASSIGN           =  ':='
  TRIPLE_DOT           =  '...'
  DOT                  =  '.'
  SEMICOLON_SYNTHETIC  = '<NL>'
  TYPE_                = 'type'

  extends(".*(Expr|Literal|Lit|OperandName)")=Expression

  implements("(Type|Import)Spec|(Var|Const|Param|(Anonymous)?Field)Definition|Receiver")="com.goide.psi.GoNamedElement"
  implements("(Function|Method)Declaration")="com.goide.psi.GoFunctionOrMethodDeclaration"
  extends("(Function|Method)Declaration")="com.goide.psi.impl.GoFunctionOrMethodDeclarationImpl<?>"
  extends("(Type|Import)Spec|(Var|Const|Param|(Anonymous)?Field)Definition|Receiver")="com.goide.psi.impl.GoNamedElementImpl<?>"
  elementTypeFactory("(Function|Method)Declaration|(Type|Import)Spec|(Var|Const|Param|(Anonymous)?Field)Definition|Receiver")='com.goide.stubs.GoStubElementTypeFactory.factory'

  pin(".*Statement")=1
  extends(".*Statement")=Statement
  extends(".*Type")=Type
  pin('.*List(?:_\d.*)?')=1

  generateTokenAccessors=true
}

File ::= PackageClause semi (ImportDeclaration semi)* TopLevelDeclaration* {pin(".*")=1}
private semi ::= '<NL>' | ';' | <<eof>>

PackageClause ::= package identifier {pin=1}

ImportDeclaration ::= import ( ImportSpec | '(' ImportSpecs? ')' ) {pin(".*")=1}
private ImportSpecs ::= ImportSpec (semi ImportSpec)* semi? {pin=1}
ImportSpec ::= [ '.' | identifier ] ImportString {
  stubClass="com.goide.stubs.GoImportSpecStub"
}
ImportString ::= string {methods=[getReferences]}

Type ::= TypeName | TypeLit | '(' Type ')'
private TypeName ::= TypeReferenceExpression QualifiedTypeReferenceExpression?
TypeReferenceExpression ::= identifier { methods=[getReference getQualifier] }
left QualifiedTypeReferenceExpression ::= '.' identifier {elementType=TypeReferenceExpression}

private TypeLit ::=
    ArrayOrSliceType
  | StructType
  | PointerType
  | FunctionType
  | InterfaceType
  | MapType
  | ChannelType

ArrayOrSliceType ::= '[' ('...'|Expression?) ']' Type {pin=1}

StructType ::= struct '{' Fields? '}' {pin=1}
private Fields ::= FieldDeclaration (semi FieldDeclaration)* semi? {pin=1}
FieldDeclaration ::= (FieldDefinitionList Type | AnonymousFieldDefinition) Tag?
private FieldDefinitionList ::= FieldDefinition (',' FieldDefinition)*
FieldDefinition ::= identifier {
  stubClass="com.goide.stubs.GoFieldDefinitionStub"
}

AnonymousFieldDefinition ::= '*'? TypeName {
  stubClass="com.goide.stubs.GoAnonymousFieldDefinitionStub"
  methods=[getIdentifier getName getTextOffset getGoType]
}
Tag ::= string

PointerType ::= '*' Type {pin=1}

FunctionType ::= func Signature {pin=1}
Signature ::= Parameters Result? {pin=1}
Result ::= '(' TypeListNoPin ')' | Type | Parameters
Parameters ::= '(' [ (ParameterList ','?| TypeListNoPin) ] ')' {pin=1}
private ParameterList ::= ParameterDeclaration ( ',' ParameterDeclaration )*
ParameterDeclaration ::= IdentifierListNoPin? '...'? Type
private IdentifierListNoPin ::= ParamDefinition &(!('.' | ')')) (',' ParamDefinition)* // todo
ParamDefinition ::= identifier {
  stubClass="com.goide.stubs.GoParamDefinitionStub"
}

InterfaceType ::= interface '{' MethodSpecs? '}' {pin(".*")=1}
private MethodSpecs ::= MethodSpec (semi MethodSpec)* semi? {pin=1}
MethodSpec ::= TypeName &(!'(') | identifier Signature

MapType ::= map '[' Type ']' Type {pin=1}
ChannelType ::= ( chan [ '<-' ] | '<-' chan ) Type {pin(".*")='chan'}

Block ::= '{' Statements? '}' {pin(".*")=1 methods=[processDeclarations]}
private Statements ::= Statement (semi Statement)* semi? {pin=1}

Statement ::=
    ConstDeclaration
  | TypeDeclaration
  | VarDeclaration
  | LabeledStatement
  | SimpleStatement
  | GoStatement
  | ReturnStatement
  | BreakStatement
  | ContinueStatement
  | GotoStatement
  | FallthroughStatement
  | Block
  | IfStatement
  | SwitchStatement
  | SelectStatement
  | ForStatement
  | DeferStatement { methods=[processDeclarations] recoverWhile=StatementRecover }

private StatementRecover ::= !('!' | '!=' | '%' | '%=' | '&&' | '&' | '&=' | '&^' | '&^=' | '(' | ')' | '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '...' | '/' | '/=' | ':' | ';' | '<' | '<-' | '<<' | '<<=' | '<=' | '<NL>' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '[' | ']' | '^' | '^=' | '{' | '|' | '|=' | '||' | '}' | case | chan | char | decimali | default | else | float | floati | func | hex | identifier | imaginary | int | interface | map | oct | rune | string | struct)

SimpleStatement ::=
    AssignmentStatement
  | SendStatement
  | ShortVarDeclaration
  | Expression ['++' | '--']

private TopLevelDeclaration ::= OneOfDeclarations semi {pin=1 recoverWhile=TopLevelDeclarationRecover}
private OneOfDeclarations ::=
    ConstDeclaration
  | TypeDeclaration
  | VarDeclaration
  | FunctionDeclaration
  | MethodDeclaration
private TopLevelDeclarationRecover ::= !(';' |'type' | const | func | var)

ConstDeclaration ::= const ( ConstSpec | '(' ConstSpecs? ')' ) {pin(".*")=1}
private ConstSpecs ::= ConstSpec (semi ConstSpec)* semi? {pin=1}
ConstSpec ::= ConstDefinitionList [ ('=' ExpressionList | Type '=' ExpressionList) ] {pin(".*")=1}
private ConstDefinitionList ::= ConstDefinition ( ',' ConstDefinition )*
ConstDefinition ::= identifier {
  stubClass="com.goide.stubs.GoConstDefinitionStub"
}

private IdentifierList ::= identifier ( ',' identifier )*
private ExpressionList ::= Expression ( ',' Expression )*

TypeDeclaration ::= 'type' ( TypeSpec | '(' TypeSpecs? ')' ) {pin(".*")=1}
private TypeSpecs ::= TypeSpec (semi TypeSpec)* semi? {pin=1}
TypeSpec ::= identifier Type {
  pin=1
  stubClass="com.goide.stubs.GoTypeSpecStub"
}

VarDeclaration ::= var ( VarSpec | '(' VarSpecs? ')' ) {pin=1}
private VarSpecs ::= VarSpec (semi VarSpec)* semi? {pin=1}
VarSpec ::= VarDefinitionList ( Type [ '=' ExpressionList ] | '=' ExpressionList )
private VarDefinitionList ::= VarDefinition ( ',' VarDefinition )*
VarDefinition ::= identifier {
  methods=[getGoType]
  stubClass="com.goide.stubs.GoVarDefinitionStub"
}

ShortVarDeclaration ::= VarDefinitionList ':=' ExpressionList {pin=2 extends=VarSpec}

FunctionDeclaration ::= func identifier Signature Block? {
  pin=2
  stubClass="com.goide.stubs.GoFunctionDeclarationStub"
}
MethodDeclaration ::= func Receiver identifier Signature Block? {
  pin=3 
  stubClass="com.goide.stubs.GoMethodDeclarationStub"
}
Receiver ::= '(' identifier? '*'? ReceiverResultType ')' {
  methods=[getGoType]
  stubClass="com.goide.stubs.GoReceiverStub"
}
ReceiverResultType ::= TypeReferenceExpression {elementType=Type}

Literal ::=
    int
  | float
  | floati
  | decimali
  | hex
  | oct
  | imaginary
  | rune
  | string
  | char
OperandName ::= ReferenceExpression QualifiedReferenceExpression? {elementType=ReferenceExpression}

left QualifiedReferenceExpression ::= '.' identifier {elementType=ReferenceExpression}
ReferenceExpression ::= identifier { methods=[getReference getQualifier] extends=Expression}

CompositeLit ::= LiteralTypeExpr LiteralValue
LiteralTypeExpr ::=
    StructType
  | ArrayOrSliceType
  | MapType
  | TypeName

LiteralValue ::= <<isModeOff "NO_EMPTY_LITERAL">> '{' '}' | '{' ElementList '}' // todo: not a smart solution
private ElementList  ::= Element ( ',' Element? )*
Element ::= [ Key ':' ] Value
Key ::= FieldName | ElementIndex
FieldName ::= identifier
ElementIndex ::= Expression
Value ::= Expression | LiteralValue

FunctionLit ::= func Signature Block {pin=1 methods=[processDeclarations]}

Expression ::=
    OrExpr
  | AndExpr
  | ConditionalExpr
  | AddExpr
  | MulExpr
  | UnaryExpr
  | ConversionExpr
  | MaxGroup
  | ParenthesesExpr {methods=[getGoType]}

OrExpr ::= Expression '||' Expression
AndExpr ::= Expression '&&' Expression
UnaryExpr ::=  unary_op Expression
ConditionalExpr ::= Expression rel_op Expression
AddExpr ::= Expression add_op Expression
MulExpr ::= Expression mul_op Expression
ParenthesesExpr ::= '(' Expression ')'

BuiltinCallExpr ::= ReferenceExpression <<isBuiltin>> '(' [ BuiltinArgs ','? ] ')'
BuiltinArgs ::= Type [ ',' ExpressionList '...'? ] | ExpressionList '...'?

private MaxGroup ::=
    CompositeLit
  | OperandName
  | BuiltinCallExpr
  | CallExpr
  | TypeAssertionExpr
  | SelectorExpr
  | MethodExpr
  | IndexExpr
  | Literal
  | LiteralTypeExpr
  | FunctionLit

private rel_op ::= '==' | '!=' | '<' | '<=' | '>' | '>='
private add_op ::= '+' | '-' | '|' | '^'
private mul_op ::= '*' | '/' | '%' | '<<' | '>>' | '&' | '&^'
private unary_op ::= '+' | '-' | '!' | '^' | '*' | '&' | '<-'

MethodExpr ::= ReceiverType '.' identifier
ReceiverType ::= TypeName | '(' '*' TypeName ')' | '(' ReceiverType ')'
SelectorExpr ::= Expression '.' &(!('(' 'type')) Expression
IndexExpr ::= Expression '[' IndexExprBody ']'
private IndexExprBody ::= (Expression? ':' Expression ':' Expression) | (Expression? ':' Expression?) | Expression
TypeAssertionExpr ::= Expression '.' '(' &(!'type') Type ')'
CallExpr ::= Expression ArgumentList
ArgumentList ::= '(' [ ExpressionList '...'? ','? ] ')' {pin=0}
ConversionExpr ::= &('*' | '<-' | '[' | chan | func | interface | map | struct) Type '(' Expression ','? ')'

LabeledStatement ::= identifier ':' Statement {pin=2}
SendStatement ::= Expression '<-' Expression {pin=2}
AssignmentStatement ::= ExpressionList assign_op ExpressionList {pin=2}
assign_op ::= '=' | '+=' | '-=' | '|=' | '^=' | '*=' | '/=' | '%=' | '<<=' | '>>=' | '&=' | '&^='
IfStatement ::= if Condition Block [ else ( IfStatement | Block ) ] {pin(".*")="if|else"}
SwitchStatement ::= SwitchStart (TypeSwitchStatement | ExprSwitchStatement)
SwitchStart ::= switch
left ExprSwitchStatement ::= Condition '{' ( ExprCaseClause )* '}' {pin=2 extends=SwitchStatement}

private Condition ::= <<enterMode "NO_EMPTY_LITERAL">> SimpleStatementOpt Expression? <<exitMode "NO_EMPTY_LITERAL">>
private SimpleStatementOpt ::= [SimpleStatement ';'?] // todo: remove ?

ExprCaseClause ::= ExprSwitchCase ':' Statements?
ExprSwitchCase ::= case ExpressionList | default {pin(".*")=1}
left TypeSwitchStatement ::= (TypeSwitchGuard | SimpleStatement ';'? TypeSwitchGuard) '{' ( TypeCaseClause )* '}' {pin=1 extends=SwitchStatement}
TypeSwitchGuard ::= [ identifier ':=' ] Expression '.' '(' 'type' ')' {pin=5}
TypeCaseClause ::= TypeSwitchCase ':' Statements?
TypeSwitchCase ::= case TypeList | default {pin(".*")=1}
private TypeList ::= Type ( ',' Type )*
private TypeListNoPin ::= Type ( ',' Type )*
ForStatement ::= for ([ForClause | RangeClause] Block | <<enterMode "NO_EMPTY_LITERAL">> Expression <<exitMode "NO_EMPTY_LITERAL">> Block)
ForClause ::= SimpleStatement? ';' Expression? ';' SimpleStatement?
RangeClause ::= ( ExpressionList '=' | VarDefinitionList ':=' ) range Expression {pin=2}
GoStatement ::= go Expression
SelectStatement ::= select '{' ( CommClause )* '}'
CommClause ::= CommCase ':' Statements? {pin=1}
CommCase ::= case ( SendStatement | RecvStatement ) | default {pin(".*")=1}
RecvStatement ::= [ ExpressionList '=' | IdentifierList ':=' ] Expression {pin=0}
ReturnStatement ::= return ExpressionList?
BreakStatement ::= break identifier?
ContinueStatement ::= continue identifier?
GotoStatement ::= goto identifier
FallthroughStatement ::= fallthrough
DeferStatement ::= defer Expression