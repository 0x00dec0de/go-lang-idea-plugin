/* The following code was generated by JFlex 1.4.3 on 8/21/10 5:56 AM */

/*
 * Copyright 2000-2010 JetBrains s.r.o.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ro.redeul.google.go.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/21/10 5:56 AM from the specification file
 * <tt>src/ro/redeul/google/go/lang/lexer/go.flex</tt>
 */
public class _GoLexer implements FlexLexer, GoTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_CHAR_LITERAL = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_STRING_LITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\43\1\30"+
    "\2\0\1\50\1\45\1\21\1\35\1\36\1\4\1\44\1\41\1\16"+
    "\1\17\1\3\1\12\7\11\2\10\1\37\1\40\1\47\1\42\1\51"+
    "\2\0\4\7\1\15\1\7\16\5\1\26\2\5\1\14\2\5\1\33"+
    "\1\22\1\34\1\46\1\5\1\27\1\55\1\52\1\63\1\57\1\54"+
    "\1\24\1\64\1\72\1\66\1\5\1\56\1\60\1\71\1\65\1\70"+
    "\1\62\1\5\1\53\1\67\1\61\1\25\1\23\1\73\1\13\1\74"+
    "\1\5\1\31\1\20\1\32\54\0\1\5\12\0\1\5\4\0\1\5"+
    "\5\0\27\5\1\0\37\5\1\0\u013f\5\31\0\162\5\4\0\14\5"+
    "\16\0\5\5\11\0\1\5\213\0\1\5\13\0\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\24\5\1\0\54\5\1\0\46\5\1\0\5\5"+
    "\4\0\202\5\10\0\105\5\1\0\46\5\2\0\2\5\6\0\20\5"+
    "\41\0\46\5\2\0\1\5\7\0\47\5\110\0\33\5\5\0\3\5"+
    "\56\0\32\5\5\0\13\5\25\0\12\6\4\0\2\5\1\0\143\5"+
    "\1\0\1\5\17\0\2\5\7\0\2\5\12\6\3\5\2\0\1\5"+
    "\20\0\1\5\1\0\36\5\35\0\3\5\60\0\46\5\13\0\1\5"+
    "\u0152\0\66\5\3\0\1\5\22\0\1\5\7\0\12\5\4\0\12\6"+
    "\25\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5"+
    "\3\0\4\5\3\0\1\5\36\0\2\5\1\0\3\5\4\0\12\6"+
    "\2\5\23\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0"+
    "\2\5\1\0\2\5\1\0\2\5\37\0\4\5\1\0\1\5\7\0"+
    "\12\6\2\0\3\5\20\0\11\5\1\0\3\5\1\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\3\0\1\5\22\0\1\5\17\0"+
    "\2\5\4\0\12\6\25\0\10\5\2\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\3\0\1\5\36\0\2\5\1\0"+
    "\3\5\4\0\12\6\1\0\1\5\21\0\1\5\1\0\6\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0"+
    "\2\5\3\0\3\5\3\0\10\5\1\0\3\5\55\0\11\6\25\0"+
    "\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5\46\0"+
    "\2\5\4\0\12\6\25\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\3\0\1\5\40\0\1\5\1\0\2\5\4\0"+
    "\12\6\25\0\10\5\1\0\3\5\1\0\27\5\1\0\20\5\46\0"+
    "\2\5\4\0\12\6\25\0\22\5\3\0\30\5\1\0\11\5\1\0"+
    "\1\5\2\0\7\5\72\0\60\5\1\0\2\5\14\0\7\5\11\0"+
    "\12\6\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0"+
    "\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0"+
    "\1\5\2\0\2\5\1\0\4\5\1\0\2\5\11\0\1\5\2\0"+
    "\5\5\1\0\1\5\11\0\12\6\2\0\2\5\42\0\1\5\37\0"+
    "\12\6\26\0\10\5\1\0\42\5\35\0\4\5\164\0\42\5\1\0"+
    "\5\5\1\0\2\5\25\0\12\6\6\0\6\5\112\0\46\5\12\0"+
    "\51\5\7\0\132\5\5\0\104\5\5\0\122\5\6\0\7\5\1\0"+
    "\77\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0"+
    "\4\5\2\0\47\5\1\0\1\5\1\0\4\5\2\0\37\5\1\0"+
    "\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0"+
    "\7\5\1\0\7\5\1\0\27\5\1\0\37\5\1\0\1\5\1\0"+
    "\4\5\2\0\7\5\1\0\47\5\1\0\23\5\16\0\11\6\56\0"+
    "\125\5\14\0\u026c\5\2\0\10\5\12\0\32\5\5\0\113\5\25\0"+
    "\15\5\1\0\4\5\16\0\22\5\16\0\22\5\16\0\15\5\1\0"+
    "\3\5\17\0\64\5\43\0\1\5\4\0\1\5\3\0\12\6\46\0"+
    "\12\6\6\0\130\5\10\0\51\5\127\0\35\5\51\0\12\6\36\5"+
    "\2\0\5\5\u038b\0\154\5\224\0\234\5\4\0\132\5\6\0\26\5"+
    "\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5\1\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5"+
    "\4\0\15\5\5\0\3\5\1\0\7\5\164\0\1\5\15\0\1\5"+
    "\202\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\3\5"+
    "\1\0\7\5\3\0\3\5\5\0\5\5\u0ebb\0\2\5\52\0\5\5"+
    "\5\0\2\5\4\0\126\5\6\0\3\5\1\0\132\5\1\0\4\5"+
    "\5\0\50\5\4\0\136\5\21\0\30\5\70\0\20\5\u0200\0\u19b6\5"+
    "\112\0\u51a6\5\132\0\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5\2\0\73\5"+
    "\225\0\7\5\14\0\5\5\5\0\1\5\1\0\12\5\1\0\15\5"+
    "\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5"+
    "\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\14\5\164\0\5\5"+
    "\1\0\207\5\23\0\12\6\7\0\32\5\6\0\32\5\13\0\131\5"+
    "\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\2\7\1\10\1\11\1\12\1\1\2\6\2\1\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\13\6\1\34\1\0\1\35\1\36\2\0\1\37\1\40"+
    "\1\41\1\0\1\42\1\43\1\0\1\44\1\45\2\0"+
    "\4\6\1\0\1\46\2\0\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\12\6\1\66\1\67\6\6\1\0"+
    "\1\37\1\0\1\70\1\71\1\72\1\73\2\0\1\73"+
    "\2\0\1\74\2\6\1\75\1\46\1\76\1\77\1\100"+
    "\20\6\1\101\1\102\4\0\1\103\4\6\1\104\2\6"+
    "\1\105\1\6\1\106\2\6\1\107\1\110\5\6\1\0"+
    "\1\6\1\111\1\6\1\112\1\113\3\6\1\114\5\6"+
    "\1\0\1\6\1\115\4\6\1\116\1\117\1\120\1\121"+
    "\1\6\1\122\1\123\3\6\1\124\2\6\1\125\1\6"+
    "\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\75\0\172\0\75\0\267\0\364\0\u0131"+
    "\0\u016e\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\u040d\0\75\0\75\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9"+
    "\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1"+
    "\0\u090e\0\75\0\75\0\u016e\0\u094b\0\u0988\0\75\0\u09c5"+
    "\0\u0a02\0\75\0\75\0\u0a3f\0\75\0\75\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0393\0\75\0\u03d0\0\u0bea"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\75\0\u0c27"+
    "\0\75\0\75\0\75\0\u0c64\0\75\0\75\0\u0ca1\0\u0cde"+
    "\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6"+
    "\0\u0f03\0\u0f40\0\u0131\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\75\0\u0a02\0\75\0\75"+
    "\0\u11a2\0\u11df\0\u0a7c\0\u121c\0\u1259\0\u0131\0\u1296\0\u12d3"+
    "\0\u0131\0\u03d0\0\75\0\75\0\75\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u0131\0\75\0\u16e0"+
    "\0\u171d\0\u175a\0\u1797\0\u0131\0\u17d4\0\u1811\0\u184e\0\u188b"+
    "\0\u0131\0\u18c8\0\u1905\0\u0131\0\u1942\0\u0131\0\u197f\0\u19bc"+
    "\0\u0131\0\u0131\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u0131\0\u1ba4\0\u0131\0\u0131\0\u1be1\0\u1c1e\0\u1c5b"+
    "\0\u0131\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06"+
    "\0\u0131\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u0131\0\u0131\0\u0131"+
    "\0\u0131\0\u1f37\0\u0131\0\u0131\0\u1f74\0\u1fb1\0\u1fee\0\u0131"+
    "\0\u202b\0\u2068\0\u0131\0\u20a5\0\u0131";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int ZZ_TRANS [] = {
    2, 3, 4, 5, 6, 7, 8, 7, 9, 9, 
    10, 7, 7, 7, 11, 12, 13, 14, 2, 15, 
    16, 7, 7, 17, 18, 19, 20, 21, 22, 23, 
    24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
    34, 35, 36, 37, 38, 7, 7, 39, 7, 40, 
    41, 42, 43, 7, 44, 45, 7, 46, 7, 7, 
    7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 47, 48, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, -1, 51, -1, 51, 51, 51, -1, -1, 52, 
    -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    52, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    54, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 51, -1, 9, 9, 9, -1, -1, 
    52, -1, 53, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 51, -1, 51, 55, 55, 56, 
    56, 52, -1, 53, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 53, -1, 53, 53, 
    53, -1, -1, -1, -1, 59, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 62, 62, 62, 62, 62, 62, 62, 62, 
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
    63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
    62, 62, 62, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 7, 7, 7, 64, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 65, 7, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 7, 7, 7, 66, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    67, 7, 7, 7, 7, 68, 68, 68, 68, 68, 
    68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
    68, 68, 68, 68, 68, 68, 68, 68, 69, 68, 
    68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
    68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
    68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
    68, 68, 68, 68, 68, 68, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 71, 70, 70, 70, 70, 70, 
    69, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 75, -1, 76, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 77, -1, -1, 78, 79, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 80, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, 
    -1, -1, 83, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 84, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, 
    -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 7, 87, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
    7, 88, 89, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 90, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, 7, 91, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    92, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 7, 7, 7, 93, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 7, 7, 7, 94, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 95, 7, 
    96, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 97, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 98, 7, 7, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 99, 7, 7, 
    7, 100, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, 7, 101, 
    7, 7, 7, 7, 102, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 103, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 
    7, 104, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 47, -1, 47, 
    47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 
    47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 
    47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 
    47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 
    47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 
    47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 
    48, 48, 105, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, -1, 
    -1, -1, -1, -1, -1, 106, -1, 106, 106, 106, 
    -1, -1, -1, 107, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 107, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 53, -1, 53, 53, 
    53, -1, -1, 52, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 51, -1, 51, 
    55, 55, -1, -1, 52, -1, 53, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 109, 
    109, 109, 109, -1, -1, 109, -1, -1, -1, -1, 
    -1, -1, 109, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 109, -1, 109, 109, -1, 109, 
    -1, -1, -1, 109, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 111, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 112, 112, 113, -1, -1, -1, 
    -1, -1, 114, 62, 62, 62, 115, 116, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 62, 62, -1, 
    62, -1, -1, -1, 62, -1, -1, -1, 62, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 7, 117, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    118, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 119, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, 120, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 71, 70, 
    70, 70, 70, 70, 121, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 122, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 123, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 124, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 7, 7, 125, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 126, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 127, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 128, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 129, 7, 
    7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 130, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 131, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 132, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 133, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 7, 7, 7, 134, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 135, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 136, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 137, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 138, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, 139, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 140, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    141, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 48, 48, 48, 142, 105, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
    48, 48, -1, -1, -1, -1, -1, -1, 106, -1, 
    106, 106, 106, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 106, 
    -1, 106, 106, 106, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 143, 143, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 144, 144, 144, 144, -1, -1, 144, -1, 
    -1, -1, -1, -1, -1, 144, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 144, -1, 144, 
    144, -1, 144, -1, -1, -1, 144, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 145, 145, 145, 145, -1, -1, 145, 
    -1, -1, -1, -1, -1, -1, 145, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 145, -1, 
    145, 145, -1, 145, -1, -1, -1, 145, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 146, 146, 146, 146, -1, -1, 
    146, -1, -1, -1, -1, -1, -1, 146, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 146, 
    -1, 146, 146, -1, 146, -1, -1, -1, 146, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 147, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 148, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, 7, 7, 149, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 150, 7, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 151, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 7, 7, 152, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 7, 7, 153, 154, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, 7, 155, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 156, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
    7, 157, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 158, 7, 7, 
    7, 7, 7, 159, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 160, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 161, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 7, 7, 162, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 163, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 7, 7, 164, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 165, 7, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 166, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 62, 62, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 62, 62, 62, 62, -1, -1, 
    62, -1, -1, -1, -1, -1, -1, 62, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 
    -1, 62, 62, -1, 62, -1, -1, -1, 62, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 113, 113, 113, 113, -1, 
    -1, 113, -1, -1, -1, -1, -1, -1, 113, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    113, -1, 113, 113, -1, 113, -1, -1, -1, 113, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 167, 167, 167, 167, 
    -1, -1, 167, -1, -1, -1, -1, -1, -1, 167, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 167, -1, 167, 167, -1, 167, -1, -1, -1, 
    167, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 168, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 169, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 7, 170, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 7, 7, 171, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 7, 172, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 173, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 
    7, 174, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 175, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 176, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, 177, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, 178, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 179, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 180, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 181, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    -1, 182, 182, 182, 182, -1, -1, 182, -1, -1, 
    -1, -1, -1, -1, 182, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 182, -1, 182, 182, 
    -1, 182, -1, -1, -1, 182, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 183, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 184, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 185, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    186, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 187, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    188, 7, 7, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    189, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 190, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 191, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 192, 7, 7, -1, -1, -1, -1, -1, 
    -1, -1, 115, 115, 115, 115, -1, -1, 115, -1, 
    -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 115, -1, 115, 
    115, -1, 115, -1, -1, -1, 115, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 7, 193, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 194, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, 7, 195, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    196, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, 7, 7, 197, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 198, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 7, 7, 199, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 200, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, 7, 7, 201, 7, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, 7, 202, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 203, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 204, 7, 7, 
  };

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\1\1\1\11\16\1\6\11\1\1"+
    "\2\11\24\1\1\0\2\11\2\0\1\1\1\11\1\1"+
    "\1\0\2\11\1\0\2\11\2\0\4\1\1\0\1\11"+
    "\2\0\7\11\1\1\3\11\1\1\2\11\23\1\1\0"+
    "\1\1\1\0\1\11\1\1\2\11\2\0\1\1\2\0"+
    "\5\1\3\11\21\1\1\11\4\0\24\1\1\0\16\1"+
    "\1\0\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private Stack <IElementType> gStringStack = new Stack<IElementType>();
  private Stack <IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;
  private int afterNls = YYINITIAL;
  private int afterBrace = YYINITIAL;

  private void clearStacks(){
    gStringStack.clear();
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack <IElementType>();



  public _GoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _GoLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1318) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return oQUOTIENT;
          }
        case 87: break;
        case 43: 
          { return oPLUS_PLUS;
          }
        case 88: break;
        case 3: 
          { return wsWS;
          }
        case 89: break;
        case 23: 
          { return oBIT_AND;
          }
        case 90: break;
        case 7: 
          { return litINT;
          }
        case 91: break;
        case 81: 
          { return( kSWITCH );
          }
        case 92: break;
        case 86: 
          { return( kFALLTHROUGH );
          }
        case 93: break;
        case 74: 
          { return kRANGE;
          }
        case 94: break;
        case 82: 
          { return( kDEFAULT );
          }
        case 95: break;
        case 14: 
          { return pRBRACK;
          }
        case 96: break;
        case 13: 
          { return pLBRACK;
          }
        case 97: break;
        case 67: 
          { return( kFUNC );
          }
        case 98: break;
        case 76: 
          { return( kCONST );
          }
        case 99: break;
        case 79: 
          { return( kSELECT );
          }
        case 100: break;
        case 63: 
          { return oSHIFT_LEFT_ASSIGN;
          }
        case 101: break;
        case 78: 
          { return kIMPORT ;
          }
        case 102: break;
        case 29: 
          { return oQUOTIENT_ASSIGN;
          }
        case 103: break;
        case 48: 
          { return oSEND_CHANNEL;
          }
        case 104: break;
        case 69: 
          { return kTYPE;
          }
        case 105: break;
        case 72: 
          { return( kGOTO );
          }
        case 106: break;
        case 51: 
          { return oREMAINDER_ASSIGN;
          }
        case 107: break;
        case 8: 
          { return oMINUS;
          }
        case 108: break;
        case 64: 
          { return oSHIFT_RIGHT_ASSIGN;
          }
        case 109: break;
        case 24: 
          { return oBIT_XOR;
          }
        case 110: break;
        case 71: 
          { return( kCHAN );
          }
        case 111: break;
        case 60: 
          { return kVAR;
          }
        case 112: break;
        case 9: 
          { return oDOT;
          }
        case 113: break;
        case 53: 
          { return oSHIFT_RIGHT;
          }
        case 114: break;
        case 28: 
          { return( mSL_COMMENT );
          }
        case 115: break;
        case 84: 
          { return kCONTINUE ;
          }
        case 116: break;
        case 39: 
          { return oVAR_ASSIGN;
          }
        case 117: break;
        case 16: 
          { return pRPAREN;
          }
        case 118: break;
        case 37: 
          { return oBIT_OR_ASSIGN;
          }
        case 119: break;
        case 40: 
          { return oEQ;
          }
        case 120: break;
        case 15: 
          { return pLPAREN;
          }
        case 121: break;
        case 10: 
          { return oBIT_OR;
          }
        case 122: break;
        case 25: 
          { return oLESS;
          }
        case 123: break;
        case 77: 
          { return kRETURN ;
          }
        case 124: break;
        case 85: 
          { return( kINTERFACE );
          }
        case 125: break;
        case 42: 
          { return oPLUS_ASSIGN;
          }
        case 126: break;
        case 44: 
          { return oBIT_AND_ASSIGN;
          }
        case 127: break;
        case 46: 
          { return oBIT_CLEAR;
          }
        case 128: break;
        case 11: 
          { return pLCURCLY;
          }
        case 129: break;
        case 61: 
          { return kFOR ;
          }
        case 130: break;
        case 27: 
          { return oGREATER;
          }
        case 131: break;
        case 33: 
          { return litOCT;
          }
        case 132: break;
        case 80: 
          { return( kSTRUCT );
          }
        case 133: break;
        case 17: 
          { return oCOLON;
          }
        case 134: break;
        case 12: 
          { return pRCURLY;
          }
        case 135: break;
        case 26: 
          { return oREMAINDER;
          }
        case 136: break;
        case 32: 
          { return litDECIMAL_I;
          }
        case 137: break;
        case 70: 
          { return( kCASE );
          }
        case 138: break;
        case 58: 
          { return oTRIPLE_DOT;
          }
        case 139: break;
        case 21: 
          { return oNOT;
          }
        case 140: break;
        case 52: 
          { return oGREATER_OR_EQUAL;
          }
        case 141: break;
        case 57: 
          { return litHEX;
          }
        case 142: break;
        case 20: 
          { return oASSIGN;
          }
        case 143: break;
        case 49: 
          { return oLESS_OR_EQUAL;
          }
        case 144: break;
        case 35: 
          { return oMINUS_ASSIGN;
          }
        case 145: break;
        case 62: 
          { return oBIT_CLEAR_ASSIGN;
          }
        case 146: break;
        case 47: 
          { return oBIT_XOR_ASSIGN;
          }
        case 147: break;
        case 34: 
          { return oMINUS_MINUS;
          }
        case 148: break;
        case 45: 
          { return oCOND_AND;
          }
        case 149: break;
        case 30: 
          { return oMUL_ASSIGN;
          }
        case 150: break;
        case 31: 
          { return litFLOAT;
          }
        case 151: break;
        case 5: 
          { return oMUL;
          }
        case 152: break;
        case 41: 
          { return oNOT_EQ;
          }
        case 153: break;
        case 54: 
          { return( kGO );
          }
        case 154: break;
        case 1: 
          { return mWRONG;
          }
        case 155: break;
        case 19: 
          { return oCOMMA;
          }
        case 156: break;
        case 56: 
          { return litFLOAT_I;
          }
        case 157: break;
        case 50: 
          { return oSHIFT_LEFT;
          }
        case 158: break;
        case 75: 
          { return( kDEFER );
          }
        case 159: break;
        case 2: 
          { return wsNLS;
          }
        case 160: break;
        case 6: 
          { return mIDENT;
          }
        case 161: break;
        case 22: 
          { return oPLUS;
          }
        case 162: break;
        case 59: 
          { return litCHAR;
          }
        case 163: break;
        case 66: 
          { return( mML_COMMENT );
          }
        case 164: break;
        case 83: 
          { return( kPACKAGE );
          }
        case 165: break;
        case 38: 
          { return litSTRING;
          }
        case 166: break;
        case 73: 
          { return( kBREAK );
          }
        case 167: break;
        case 68: 
          { return( kELSE );
          }
        case 168: break;
        case 18: 
          { return oSEMI;
          }
        case 169: break;
        case 65: 
          { return( kMAP );
          }
        case 170: break;
        case 55: 
          { return kIF ;
          }
        case 171: break;
        case 36: 
          { return oCOND_OR;
          }
        case 172: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
