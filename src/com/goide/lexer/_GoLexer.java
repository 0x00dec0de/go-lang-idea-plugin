/* The following code was generated by JFlex 1.4.3 on 12/27/13 12:57 AM */

package com.goide.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.goide.GoTypes;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import static com.goide.GoParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/27/13 12:57 AM from the specification file
 * <tt>go.flex</tt>
 */
public class _GoLexer implements FlexLexer, GoTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAYBE_SEMICOLON = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\3\1\43\1\20"+
    "\2\0\1\50\1\45\1\0\1\35\1\36\1\24\1\44\1\41\1\16"+
    "\1\17\1\4\1\12\7\11\1\30\1\10\1\37\1\40\1\47\1\42"+
    "\1\51\2\0\4\7\1\15\1\7\16\5\1\27\2\5\1\14\2\5"+
    "\1\33\1\26\1\34\1\46\1\5\1\25\1\55\1\52\1\66\1\70"+
    "\1\54\1\22\1\64\1\61\1\67\1\5\1\56\1\57\1\73\1\65"+
    "\1\62\1\71\1\5\1\53\1\72\1\60\1\63\1\21\1\74\1\13"+
    "\1\75\1\5\1\31\1\23\1\32\54\0\1\5\12\0\1\5\4\0"+
    "\1\5\5\0\27\5\1\0\37\5\1\0\u01ca\5\4\0\14\5\16\0"+
    "\5\5\7\0\1\5\1\0\1\5\201\0\5\5\1\0\2\5\2\0"+
    "\4\5\10\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5\1\0"+
    "\123\5\1\0\213\5\10\0\236\5\11\0\46\5\2\0\1\5\7\0"+
    "\47\5\110\0\33\5\5\0\3\5\55\0\53\5\25\0\12\6\4\0"+
    "\2\5\1\0\143\5\1\0\1\5\17\0\2\5\7\0\2\5\12\6"+
    "\3\5\2\0\1\5\20\0\1\5\1\0\36\5\35\0\131\5\13\0"+
    "\1\5\16\0\12\6\41\5\11\0\2\5\4\0\1\5\5\0\26\5"+
    "\4\0\1\5\11\0\1\5\3\0\1\5\27\0\31\5\253\0\66\5"+
    "\3\0\1\5\22\0\1\5\7\0\12\5\4\0\12\6\1\0\7\5"+
    "\1\0\7\5\5\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\3\0\1\5\20\0\1\5\15\0\2\5"+
    "\1\0\3\5\4\0\12\6\2\5\23\0\6\5\4\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\37\0"+
    "\4\5\1\0\1\5\7\0\12\6\2\0\3\5\20\0\11\5\1\0"+
    "\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0"+
    "\1\5\22\0\1\5\17\0\2\5\4\0\12\6\25\0\10\5\2\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0"+
    "\1\5\36\0\2\5\1\0\3\5\4\0\12\6\1\0\1\5\21\0"+
    "\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\26\0"+
    "\1\5\25\0\12\6\25\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\3\0\1\5\32\0\2\5\6\0\2\5\4\0"+
    "\12\6\25\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"+
    "\5\5\3\0\1\5\40\0\1\5\1\0\2\5\4\0\12\6\1\0"+
    "\2\5\22\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5\20\0"+
    "\1\5\21\0\2\5\4\0\12\6\12\0\6\5\5\0\22\5\3\0"+
    "\30\5\1\0\11\5\1\0\1\5\2\0\7\5\72\0\60\5\1\0"+
    "\2\5\14\0\7\5\11\0\12\6\47\0\2\5\1\0\1\5\2\0"+
    "\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0"+
    "\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\0"+
    "\2\5\11\0\1\5\2\0\5\5\1\0\1\5\11\0\12\6\2\0"+
    "\2\5\42\0\1\5\37\0\12\6\26\0\10\5\1\0\44\5\33\0"+
    "\5\5\163\0\53\5\24\0\1\5\12\6\6\0\6\5\4\0\4\5"+
    "\3\0\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14\0\1\5"+
    "\1\0\12\6\6\0\46\5\12\0\53\5\1\0\1\5\3\0\u0149\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\51\5"+
    "\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0\103\5"+
    "\45\0\20\5\20\0\125\5\14\0\u026c\5\2\0\21\5\1\0\32\5"+
    "\5\0\113\5\25\0\15\5\1\0\4\5\16\0\22\5\16\0\22\5"+
    "\16\0\15\5\1\0\3\5\17\0\64\5\43\0\1\5\4\0\1\5"+
    "\3\0\12\6\46\0\12\6\6\0\130\5\10\0\51\5\1\0\1\5"+
    "\5\0\106\5\12\0\35\5\51\0\12\6\36\5\2\0\5\5\13\0"+
    "\54\5\25\0\7\5\10\0\12\6\46\0\27\5\11\0\65\5\53\0"+
    "\12\6\6\0\12\6\15\0\1\5\135\0\57\5\21\0\7\5\4\0"+
    "\12\6\51\0\36\5\15\0\2\5\12\6\6\0\46\5\32\0\44\5"+
    "\34\0\12\6\3\0\3\5\12\6\44\5\153\0\4\5\1\0\4\5"+
    "\16\0\300\5\100\0\u0116\5\2\0\6\5\2\0\46\5\2\0\6\5"+
    "\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5"+
    "\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5"+
    "\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5"+
    "\164\0\1\5\15\0\1\5\20\0\15\5\145\0\1\5\4\0\1\5"+
    "\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5\5\0\5\5"+
    "\4\0\1\5\64\0\2\5\u0a7b\0\57\5\1\0\57\5\1\0\205\5"+
    "\6\0\4\5\21\0\46\5\12\0\66\5\11\0\1\5\20\0\27\5"+
    "\11\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\120\0\1\5\u01d5\0\2\5"+
    "\52\0\5\5\5\0\2\5\4\0\126\5\6\0\3\5\1\0\132\5"+
    "\1\0\4\5\5\0\51\5\3\0\136\5\21\0\33\5\65\0\20\5"+
    "\u0200\0\u19b6\5\112\0\u51cc\5\64\0\u048d\5\103\0\56\5\2\0\u010d\5"+
    "\3\0\20\5\12\6\2\5\24\0\57\5\20\0\31\5\10\0\106\5"+
    "\61\0\11\5\2\0\147\5\2\0\4\5\1\0\2\5\16\0\12\5"+
    "\120\0\10\5\1\0\3\5\1\0\4\5\1\0\27\5\35\0\64\5"+
    "\16\0\62\5\34\0\12\6\30\0\6\5\3\0\1\5\4\0\12\6"+
    "\34\5\12\0\27\5\31\0\35\5\7\0\57\5\34\0\1\5\12\6"+
    "\46\0\51\5\27\0\3\5\1\0\10\5\4\0\12\6\6\0\27\5"+
    "\3\0\1\5\5\0\60\5\1\0\1\5\3\0\2\5\2\0\5\5"+
    "\2\0\1\5\1\0\1\5\30\0\3\5\43\0\6\5\2\0\6\5"+
    "\2\0\6\5\11\0\7\5\1\0\7\5\221\0\43\5\15\0\12\6"+
    "\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u012e\5\2\0\76\5"+
    "\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\0\12\5"+
    "\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\14\5"+
    "\164\0\5\5\1\0\207\5\23\0\12\6\7\0\32\5\6\0\32\5"+
    "\13\0\131\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\1\2\6"+
    "\1\7\1\10\1\11\2\5\1\12\1\13\1\11\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\13\5\1\35\2\36\1\35\1\37\1\40\1\41\2\0"+
    "\1\42\1\43\1\44\1\0\1\45\1\46\1\0\1\11"+
    "\1\0\4\5\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\5\5\1\71\3\5\1\72"+
    "\10\5\1\40\1\42\1\0\1\73\1\74\1\75\1\76"+
    "\1\5\1\77\1\5\1\100\1\101\1\102\20\5\1\103"+
    "\1\40\1\0\1\5\1\104\3\5\1\105\1\106\1\107"+
    "\1\110\1\111\13\5\1\112\1\5\1\113\1\5\1\114"+
    "\2\5\1\115\6\5\1\116\2\5\1\117\2\5\1\120"+
    "\1\121\1\122\3\5\1\123\1\124\1\5\1\125\2\5"+
    "\1\126\1\5\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\174\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\174\0\174\0\174\0\174\0\174\0\174"+
    "\0\u041e\0\174\0\174\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744"+
    "\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\174\0\174"+
    "\0\u08f6\0\u0934\0\u0972\0\u09b0\0\174\0\u0174\0\u09ee\0\u0a2c"+
    "\0\174\0\u0a6a\0\u0aa8\0\174\0\174\0\u0ae6\0\174\0\u0b24"+
    "\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\174\0\174\0\174\0\174"+
    "\0\174\0\174\0\174\0\174\0\174\0\174\0\u0c5a\0\174"+
    "\0\174\0\174\0\u0c98\0\174\0\174\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0136"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\174\0\u0aa8\0\174\0\u0136\0\u11ec"+
    "\0\u0136\0\u122a\0\174\0\174\0\174\0\u1268\0\u12a6\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u0136\0\174\0\u1132"+
    "\0\u1648\0\u0136\0\u1686\0\u16c4\0\u1702\0\u0136\0\u0136\0\u0136"+
    "\0\u0136\0\u0136\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876"+
    "\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u0136\0\u19ea\0\u0136"+
    "\0\u1a28\0\u0136\0\u1a66\0\u1aa4\0\u0136\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u0136\0\u1c56\0\u1c94\0\u0136\0\u1cd2"+
    "\0\u1d10\0\u0136\0\u0136\0\u0136\0\u1d4e\0\u1d8c\0\u1dca\0\u0136"+
    "\0\u0136\0\u1e08\0\u0136\0\u1e46\0\u1e84\0\u0136\0\u1ec2\0\u0136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\7\2\11"+
    "\1\12\3\7\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\3\1\7\1\11\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\3\7\1\47\3\7\1\50\1\7\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\2\7\1\57\1\60\1\61"+
    "\1\5\1\62\71\57\77\0\2\4\77\0\1\63\17\0"+
    "\1\64\15\0\1\65\40\0\11\7\3\0\2\7\4\0"+
    "\2\7\21\0\24\7\6\0\1\66\1\0\3\66\2\0"+
    "\1\67\1\0\1\70\10\0\1\66\23\0\1\67\12\0"+
    "\1\71\14\0\1\66\1\0\3\11\2\0\1\67\1\0"+
    "\1\70\10\0\1\11\23\0\1\67\12\0\1\71\14\0"+
    "\1\66\1\0\1\66\2\72\2\73\1\67\1\0\1\70"+
    "\10\0\1\66\23\0\1\67\12\0\1\71\24\0\1\74"+
    "\23\0\1\75\41\0\1\70\1\0\3\70\4\0\1\76"+
    "\10\0\1\70\45\0\1\15\2\0\15\15\1\77\5\15"+
    "\1\100\47\15\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\3\7\1\101\20\7\5\0\11\7\3\0\2\7"+
    "\4\0\2\7\21\0\3\7\1\102\4\7\1\103\1\104"+
    "\12\7\23\0\1\105\16\0\1\106\75\0\1\107\33\0"+
    "\25\22\1\77\50\22\42\0\1\110\75\0\1\111\75\0"+
    "\1\112\75\0\1\113\1\0\1\114\73\0\1\115\2\0"+
    "\1\116\1\117\71\0\1\120\51\0\1\121\23\0\1\122"+
    "\4\0\1\123\70\0\1\124\75\0\1\125\6\0\1\126"+
    "\31\0\11\7\3\0\2\7\4\0\2\7\21\0\1\7"+
    "\1\127\22\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\2\7\1\130\1\131\20\7\5\0\11\7\3\0"+
    "\2\7\4\0\2\7\21\0\5\7\1\132\16\7\5\0"+
    "\11\7\3\0\2\7\4\0\2\7\21\0\23\7\1\133"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\10\7"+
    "\1\134\13\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\3\7\1\135\3\7\1\136\1\137\13\7\5\0"+
    "\11\7\3\0\1\7\1\140\4\0\2\7\21\0\13\7"+
    "\1\141\5\7\1\142\2\7\5\0\11\7\3\0\2\7"+
    "\4\0\2\7\21\0\2\7\1\143\21\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\3\7\1\144\20\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\2\7"+
    "\1\145\3\7\1\146\13\7\1\147\1\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\3\7\1\150\20\7"+
    "\1\0\1\60\100\0\1\63\17\0\1\64\51\0\1\63"+
    "\2\0\73\63\24\64\1\151\51\64\6\0\1\152\1\0"+
    "\3\152\3\0\1\153\11\0\1\152\13\0\1\153\37\0"+
    "\1\70\1\0\3\70\2\0\1\67\12\0\1\70\23\0"+
    "\1\67\12\0\1\154\14\0\1\66\1\0\1\66\2\72"+
    "\2\0\1\67\1\0\1\70\10\0\1\66\23\0\1\67"+
    "\12\0\1\71\15\0\4\155\2\0\1\155\4\0\1\155"+
    "\5\0\1\155\21\0\1\155\1\0\2\155\10\0\1\155"+
    "\1\0\1\155\24\0\1\156\67\0\3\15\4\0\3\15"+
    "\3\0\3\15\21\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\1\0\1\15\15\0\11\7\3\0\2\7"+
    "\4\0\2\7\21\0\1\7\1\157\22\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\5\7\1\160\16\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\1\7"+
    "\1\161\22\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\13\7\1\162\10\7\42\0\1\163\75\0\1\164"+
    "\75\0\1\165\40\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\2\7\1\166\21\7\5\0\11\7\3\0\2\7"+
    "\4\0\2\7\21\0\6\7\1\167\15\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\13\7\1\170\10\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\20\7"+
    "\1\171\3\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\17\7\1\172\4\7\5\0\11\7\3\0\2\7"+
    "\4\0\2\7\21\0\6\7\1\173\15\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\20\7\1\174\3\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\3\7"+
    "\1\175\20\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\13\7\1\176\10\7\5\0\11\7\3\0\2\7"+
    "\4\0\2\7\21\0\6\7\1\177\15\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\17\7\1\200\4\7"+
    "\5\0\11\7\3\0\1\7\1\201\4\0\2\7\21\0"+
    "\24\7\5\0\11\7\3\0\2\7\4\0\2\7\21\0"+
    "\14\7\1\202\7\7\5\0\11\7\3\0\2\7\4\0"+
    "\2\7\21\0\5\7\1\203\16\7\5\0\11\7\3\0"+
    "\2\7\4\0\2\7\21\0\1\7\1\204\22\7\5\0"+
    "\11\7\3\0\2\7\4\0\2\7\21\0\15\7\1\205"+
    "\6\7\5\0\11\7\3\0\2\7\4\0\2\7\21\0"+
    "\17\7\1\206\4\7\4\64\1\207\17\64\1\210\51\64"+
    "\6\0\1\152\1\0\3\152\15\0\1\152\36\0\1\154"+
    "\14\0\1\152\1\0\3\152\15\0\1\152\52\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\5\7\1\211\16\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\14\7"+
    "\1\212\7\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\3\7\1\213\20\7\5\0\11\7\3\0\2\7"+
    "\4\0\2\7\21\0\11\7\1\214\12\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\12\7\1\215\11\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\2\7"+
    "\1\216\21\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\2\7\1\217\21\7\5\0\11\7\3\0\2\7"+
    "\4\0\2\7\21\0\10\7\1\220\13\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\2\7\1\221\21\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\13\7"+
    "\1\222\10\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\6\7\1\223\11\7\1\224\3\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\2\7\1\225\21\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\10\7"+
    "\1\226\13\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\2\7\1\227\1\230\20\7\5\0\11\7\3\0"+
    "\2\7\4\0\2\7\21\0\4\7\1\231\17\7\5\0"+
    "\11\7\3\0\2\7\4\0\2\7\21\0\2\7\1\232"+
    "\21\7\5\0\11\7\3\0\2\7\4\0\2\7\21\0"+
    "\11\7\1\233\12\7\5\0\11\7\3\0\2\7\4\0"+
    "\2\7\21\0\6\7\1\234\15\7\5\0\11\7\3\0"+
    "\2\7\4\0\2\7\21\0\6\7\1\235\15\7\5\0"+
    "\11\7\3\0\2\7\4\0\2\7\21\0\4\7\1\236"+
    "\17\7\5\0\11\7\3\0\2\7\4\0\2\7\21\0"+
    "\1\7\1\237\22\7\5\0\11\7\3\0\2\7\4\0"+
    "\2\7\21\0\2\7\1\240\21\7\5\0\11\7\3\0"+
    "\2\7\4\0\2\7\21\0\15\7\1\241\6\7\5\0"+
    "\11\7\3\0\2\7\4\0\2\7\21\0\6\7\1\242"+
    "\15\7\5\0\11\7\3\0\2\7\4\0\2\7\21\0"+
    "\1\7\1\243\22\7\5\0\11\7\3\0\2\7\4\0"+
    "\2\7\21\0\1\7\1\244\22\7\5\0\11\7\3\0"+
    "\2\7\4\0\2\7\21\0\1\7\1\245\22\7\5\0"+
    "\11\7\3\0\2\7\4\0\2\7\21\0\11\7\1\246"+
    "\12\7\5\0\11\7\3\0\2\7\4\0\2\7\21\0"+
    "\3\7\1\247\20\7\5\0\11\7\3\0\2\7\4\0"+
    "\2\7\21\0\14\7\1\250\7\7\5\0\11\7\3\0"+
    "\2\7\4\0\2\7\21\0\14\7\1\251\7\7\5\0"+
    "\11\7\3\0\2\7\4\0\2\7\21\0\14\7\1\252"+
    "\7\7\5\0\11\7\3\0\2\7\4\0\2\7\21\0"+
    "\7\7\1\253\14\7\5\0\11\7\3\0\2\7\4\0"+
    "\2\7\21\0\13\7\1\254\10\7\5\0\11\7\3\0"+
    "\2\7\4\0\2\7\21\0\13\7\1\255\10\7\5\0"+
    "\11\7\3\0\1\7\1\256\4\0\2\7\21\0\24\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\6\7"+
    "\1\257\15\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\5\7\1\260\16\7\5\0\11\7\3\0\2\7"+
    "\4\0\2\7\21\0\12\7\1\261\11\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\6\7\1\262\15\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\6\7"+
    "\1\263\15\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\7\7\1\264\14\7\5\0\11\7\3\0\2\7"+
    "\4\0\2\7\21\0\1\7\1\265\22\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\11\7\1\266\12\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\3\7"+
    "\1\267\20\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\6\7\1\270\15\7\5\0\11\7\3\0\2\7"+
    "\4\0\2\7\21\0\2\7\1\271\21\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\10\7\1\272\13\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\2\7"+
    "\1\273\21\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\14\7\1\274\7\7\5\0\11\7\3\0\2\7"+
    "\4\0\2\7\21\0\11\7\1\275\12\7\5\0\11\7"+
    "\3\0\2\7\4\0\2\7\21\0\2\7\1\276\21\7"+
    "\5\0\11\7\3\0\2\7\4\0\2\7\21\0\12\7"+
    "\1\277\11\7\5\0\11\7\3\0\2\7\4\0\2\7"+
    "\21\0\7\7\1\300\14\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\15\1\6\11\1\1\2\11"+
    "\23\1\2\11\4\1\1\11\2\0\1\1\1\11\1\1"+
    "\1\0\2\11\1\0\1\11\1\0\4\1\12\11\1\1"+
    "\3\11\1\1\2\11\25\1\1\0\1\11\1\1\1\11"+
    "\4\1\3\11\21\1\1\11\1\0\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _GoLexer() {
    this((java.io.Reader)null);
  }

  private Stack<IElementType> gStringStack = new Stack<IElementType>();
  private Stack<IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;
  private int afterNls = YYINITIAL;
  private int afterBrace = YYINITIAL;

  private void clearStacks(){
    gStringStack.clear();
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack<IElementType>();



  public _GoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _GoLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1702) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 53: 
          { return SHIFT_LEFT;
          }
        case 88: break;
        case 32: 
          { return MULTILINE_COMMENT;
          }
        case 89: break;
        case 64: 
          { return BIT_CLEAR_ASSIGN;
          }
        case 90: break;
        case 2: 
          { return NLS;
          }
        case 91: break;
        case 16: 
          { return LPAREN;
          }
        case 92: break;
        case 26: 
          { return LESS;
          }
        case 93: break;
        case 51: 
          { return SEND_CHANNEL;
          }
        case 94: break;
        case 48: 
          { return COND_AND;
          }
        case 95: break;
        case 37: 
          { yybegin(MAYBE_SEMICOLON); return MINUS_MINUS;
          }
        case 96: break;
        case 76: 
          { return CONST;
          }
        case 97: break;
        case 45: 
          { return PLUS_ASSIGN;
          }
        case 98: break;
        case 9: 
          { yybegin(MAYBE_SEMICOLON); return STRING;
          }
        case 99: break;
        case 34: 
          { yybegin(MAYBE_SEMICOLON); return FLOAT;
          }
        case 100: break;
        case 18: 
          { return COLON;
          }
        case 101: break;
        case 43: 
          { return EQ;
          }
        case 102: break;
        case 17: 
          { yybegin(MAYBE_SEMICOLON); return RPAREN;
          }
        case 103: break;
        case 73: 
          { return CHAN;
          }
        case 104: break;
        case 3: 
          { return WS;
          }
        case 105: break;
        case 19: 
          { return SEMICOLON;
          }
        case 106: break;
        case 78: 
          { yybegin(MAYBE_SEMICOLON); return RETURN ;
          }
        case 107: break;
        case 20: 
          { return COMMA;
          }
        case 108: break;
        case 68: 
          { return FUNC;
          }
        case 109: break;
        case 36: 
          { yybegin(MAYBE_SEMICOLON); return OCT;
          }
        case 110: break;
        case 58: 
          { return IF ;
          }
        case 111: break;
        case 81: 
          { return STRUCT;
          }
        case 112: break;
        case 39: 
          { return COND_OR;
          }
        case 113: break;
        case 65: 
          { return SHIFT_LEFT_ASSIGN;
          }
        case 114: break;
        case 79: 
          { return IMPORT ;
          }
        case 115: break;
        case 23: 
          { return PLUS;
          }
        case 116: break;
        case 57: 
          { return GO;
          }
        case 117: break;
        case 24: 
          { return BIT_AND;
          }
        case 118: break;
        case 47: 
          { return BIT_AND_ASSIGN;
          }
        case 119: break;
        case 82: 
          { return SWITCH;
          }
        case 120: break;
        case 60: 
          { yybegin(MAYBE_SEMICOLON); return HEX;
          }
        case 121: break;
        case 4: 
          { return QUOTIENT;
          }
        case 122: break;
        case 10: 
          { return BIT_OR;
          }
        case 123: break;
        case 38: 
          { return MINUS_ASSIGN;
          }
        case 124: break;
        case 8: 
          { return DOT;
          }
        case 125: break;
        case 83: 
          { return DEFAULT;
          }
        case 126: break;
        case 74: 
          { yybegin(MAYBE_SEMICOLON); return BREAK;
          }
        case 127: break;
        case 84: 
          { return PACKAGE;
          }
        case 128: break;
        case 70: 
          { return TYPE_;
          }
        case 129: break;
        case 54: 
          { return REMAINDER_ASSIGN;
          }
        case 130: break;
        case 50: 
          { return BIT_XOR_ASSIGN;
          }
        case 131: break;
        case 42: 
          { return VAR_ASSIGN;
          }
        case 132: break;
        case 87: 
          { yybegin(MAYBE_SEMICOLON); return FALLTHROUGH;
          }
        case 133: break;
        case 31: 
          { return LINE_COMMENT;
          }
        case 134: break;
        case 5: 
          { yybegin(MAYBE_SEMICOLON); return IDENTIFIER;
          }
        case 135: break;
        case 29: 
          { yybegin(YYINITIAL); yypushback(yytext().length());
          }
        case 136: break;
        case 77: 
          { return DEFER;
          }
        case 137: break;
        case 40: 
          { return BIT_OR_ASSIGN;
          }
        case 138: break;
        case 49: 
          { return BIT_CLEAR;
          }
        case 139: break;
        case 12: 
          { return LBRACE;
          }
        case 140: break;
        case 21: 
          { return ASSIGN;
          }
        case 141: break;
        case 80: 
          { return SELECT;
          }
        case 142: break;
        case 25: 
          { return BIT_XOR;
          }
        case 143: break;
        case 35: 
          { yybegin(MAYBE_SEMICOLON); return DECIMALI;
          }
        case 144: break;
        case 63: 
          { return FOR ;
          }
        case 145: break;
        case 14: 
          { return LBRACK;
          }
        case 146: break;
        case 62: 
          { return VAR;
          }
        case 147: break;
        case 86: 
          { return INTERFACE;
          }
        case 148: break;
        case 27: 
          { return REMAINDER;
          }
        case 149: break;
        case 22: 
          { return NOT;
          }
        case 150: break;
        case 44: 
          { return NOT_EQ;
          }
        case 151: break;
        case 41: 
          { return MUL_ASSIGN;
          }
        case 152: break;
        case 69: 
          { return ELSE;
          }
        case 153: break;
        case 61: 
          { return TRIPLE_DOT;
          }
        case 154: break;
        case 67: 
          { return MAP;
          }
        case 155: break;
        case 30: 
          { yybegin(YYINITIAL); yypushback(yytext().length()); return SEMICOLON_SYNTHETIC;
          }
        case 156: break;
        case 13: 
          { yybegin(MAYBE_SEMICOLON); return RBRACE;
          }
        case 157: break;
        case 6: 
          { yybegin(MAYBE_SEMICOLON); return INT;
          }
        case 158: break;
        case 11: 
          { return MUL;
          }
        case 159: break;
        case 46: 
          { yybegin(MAYBE_SEMICOLON); return PLUS_PLUS;
          }
        case 160: break;
        case 71: 
          { return GOTO;
          }
        case 161: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 162: break;
        case 15: 
          { yybegin(MAYBE_SEMICOLON); return RBRACK;
          }
        case 163: break;
        case 7: 
          { return MINUS;
          }
        case 164: break;
        case 75: 
          { return RANGE;
          }
        case 165: break;
        case 72: 
          { return CASE;
          }
        case 166: break;
        case 85: 
          { yybegin(MAYBE_SEMICOLON); return CONTINUE ;
          }
        case 167: break;
        case 28: 
          { return GREATER;
          }
        case 168: break;
        case 59: 
          { yybegin(MAYBE_SEMICOLON); return FLOATI;
          }
        case 169: break;
        case 52: 
          { return LESS_OR_EQUAL;
          }
        case 170: break;
        case 66: 
          { return SHIFT_RIGHT_ASSIGN;
          }
        case 171: break;
        case 56: 
          { return SHIFT_RIGHT;
          }
        case 172: break;
        case 33: 
          { return QUOTIENT_ASSIGN;
          }
        case 173: break;
        case 55: 
          { return GREATER_OR_EQUAL;
          }
        case 174: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
