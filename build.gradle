/*
 * Copyright 2013-2015 Sergey Ignatov, Alexander Zolotov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Local testing:
//
buildscript {
  repositories {
    flatDir {
      dirs "/Users/zolotov/dev/idea-gradle-plugin/build/libs/"
    }
  }
  dependencies {
    classpath group: 'org.jetbrains', name: 'intellij-gradle-plugin', version: '0.0.15'
  }
}

plugins {
//  id 'org.jetbrains.intellij' version "0.0.15"
  id "de.undercouch.download" version "1.2"
}
version = '0.9.' + System.properties.getProperty('build.number', 'SNAPSHOT')
project.ext.idea_version = System.properties.getProperty('idea.version', '141.1531.2')
project.ext.java_version = System.properties.getProperty('java.version', '1.8')

allprojects {
  apply plugin: 'java'
  sourceCompatibility = rootProject.java_version
  targetCompatibility = rootProject.java_version

  sourceSets {
    main {
      java.srcDirs 'src', 'gen'
      resources.srcDir 'resources'
    }
    test {
      java.srcDir 'tests'
    }
  }

  apply plugin: 'org.jetbrains.intellij'
  intellij {
    version rootProject.idea_version
    pluginName 'Go'
    plugins 'coverage'
  }
}

apply plugin: 'idea'
idea {
  project {
    jdkName = java_version
    languageLevel = java_version
  }
  module {
    generatedSourceDirs += file('gen')
  }
}

dependencies {
  compile project(':utils'), project(':google-app-engine'), project(':google-app-engine:google-app-engine-yaml')
}

test {
  useJUnit {
    excludeCategories 'com.goide.categories.Performance'
  }
  testLogging {
    exceptionFormat = 'full'
  }
}

task preparePerformanceTestData << {
  downloadAndUnzip('https://storage.googleapis.com/golang/go1.4.2.src.tar.gz', 'go', 'go')
  downloadAndUnzip('https://github.com/docker/docker/archive/v1.5.0.tar.gz', 'docker-1.5.0', 'docker')
}

task performanceTest(type: Test, group: 'Verification', dependsOn: [classes, testClasses, preparePerformanceTestData]) {
  maxHeapSize = '512m'
  minHeapSize = '256m'

  useJUnit {
    includeCategories 'com.goide.categories.Performance'
    reports.html.destination = "$buildDir/reports/performanceTests"
  }
  testLogging {
    exceptionFormat = 'full'
  }
}
check.dependsOn performanceTest

private void downloadAndUnzip(url, sourceDir, targetDir) {
  def testDataPath = "${projectDir}/testData/performance/"
  def markerFile = file("${testDataPath}/${targetDir}/markerFile")
  def tmpPath = "${testDataPath}/tmp/"
  def tar = file("${tmpPath}/${targetDir}.tar.gz")
  if (!markerFile.exists()) {
    download {
      src url
      dest tar
    }
    copy {
      from tarTree(tar)
      into tmpPath
    }
    copy {
      from "${tmpPath}/${sourceDir}"
      into "${testDataPath}/${targetDir}"
    }
    markerFile.createNewFile()
  }
  delete file(tmpPath)
}
